
STM32TemperatureRegulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080082c8  080082c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c8  080082c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080082d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000074  08008344  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08008344  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003672e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d5d  00000000  00000000  000567cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  0005b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  0005d030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f7a7  00000000  00000000  0005ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0001df5b  00000000  00000000  0006e1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008c12a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000083ac  00000000  00000000  0008c17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ffc 	.word	0x08007ffc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08007ffc 	.word	0x08007ffc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	bf28      	it	cs
 8000a68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a6c:	d2ed      	bcs.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_fmul>:
 8000bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd6:	ea92 0f0c 	teqne	r2, ip
 8000bda:	ea93 0f0c 	teqne	r3, ip
 8000bde:	d06f      	beq.n	8000cc0 <__aeabi_fmul+0xf8>
 8000be0:	441a      	add	r2, r3
 8000be2:	ea80 0c01 	eor.w	ip, r0, r1
 8000be6:	0240      	lsls	r0, r0, #9
 8000be8:	bf18      	it	ne
 8000bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bee:	d01e      	beq.n	8000c2e <__aeabi_fmul+0x66>
 8000bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c08:	bf3e      	ittt	cc
 8000c0a:	0049      	lslcc	r1, r1, #1
 8000c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c10:	005b      	lslcc	r3, r3, #1
 8000c12:	ea40 0001 	orr.w	r0, r0, r1
 8000c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1a:	2afd      	cmp	r2, #253	; 0xfd
 8000c1c:	d81d      	bhi.n	8000c5a <__aeabi_fmul+0x92>
 8000c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	0249      	lsleq	r1, r1, #9
 8000c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c42:	3a7f      	subs	r2, #127	; 0x7f
 8000c44:	bfc2      	ittt	gt
 8000c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4e:	4770      	bxgt	lr
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	dc5d      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000c5c:	f112 0f19 	cmn.w	r2, #25
 8000c60:	bfdc      	itt	le
 8000c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	4770      	bxle	lr
 8000c68:	f1c2 0200 	rsb	r2, r2, #0
 8000c6c:	0041      	lsls	r1, r0, #1
 8000c6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c72:	f1c2 0220 	rsb	r2, r2, #32
 8000c76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7e:	f140 0000 	adc.w	r0, r0, #0
 8000c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c86:	bf08      	it	eq
 8000c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8c:	4770      	bx	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0040      	lsleq	r0, r0, #1
 8000c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9e:	3a01      	subeq	r2, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xce>
 8000ca2:	ea40 000c 	orr.w	r0, r0, ip
 8000ca6:	f093 0f00 	teq	r3, #0
 8000caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0049      	lsleq	r1, r1, #1
 8000cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb6:	3b01      	subeq	r3, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cba:	ea41 010c 	orr.w	r1, r1, ip
 8000cbe:	e78f      	b.n	8000be0 <__aeabi_fmul+0x18>
 8000cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc4:	ea92 0f0c 	teq	r2, ip
 8000cc8:	bf18      	it	ne
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d00a      	beq.n	8000ce6 <__aeabi_fmul+0x11e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1d8      	bne.n	8000c8e <__aeabi_fmul+0xc6>
 8000cdc:	ea80 0001 	eor.w	r0, r0, r1
 8000ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	bf17      	itett	ne
 8000cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf0:	4608      	moveq	r0, r1
 8000cf2:	f091 0f00 	teqne	r1, #0
 8000cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfa:	d014      	beq.n	8000d26 <__aeabi_fmul+0x15e>
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d101      	bne.n	8000d06 <__aeabi_fmul+0x13e>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	d10f      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d06:	ea93 0f0c 	teq	r3, ip
 8000d0a:	d103      	bne.n	8000d14 <__aeabi_fmul+0x14c>
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	bf18      	it	ne
 8000d10:	4608      	movne	r0, r1
 8000d12:	d108      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d14:	ea80 0001 	eor.w	r0, r0, r1
 8000d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fdiv>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d069      	beq.n	8000e1c <__aeabi_fdiv+0xec>
 8000d48:	eba2 0203 	sub.w	r2, r2, r3
 8000d4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_fdiv+0x98>
 8000d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf38      	it	cc
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d76:	428b      	cmp	r3, r1
 8000d78:	bf24      	itt	cs
 8000d7a:	1a5b      	subcs	r3, r3, r1
 8000d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d84:	bf24      	itt	cs
 8000d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d92:	bf24      	itt	cs
 8000d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da0:	bf24      	itt	cs
 8000da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	bf18      	it	ne
 8000dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db2:	d1e0      	bne.n	8000d76 <__aeabi_fdiv+0x46>
 8000db4:	2afd      	cmp	r2, #253	; 0xfd
 8000db6:	f63f af50 	bhi.w	8000c5a <__aeabi_fmul+0x92>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd0:	327f      	adds	r2, #127	; 0x7f
 8000dd2:	bfc2      	ittt	gt
 8000dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ddc:	4770      	bxgt	lr
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	3a01      	subs	r2, #1
 8000de8:	e737      	b.n	8000c5a <__aeabi_fmul+0x92>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xc2>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xda>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e795      	b.n	8000d48 <__aeabi_fdiv+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d108      	bne.n	8000e38 <__aeabi_fdiv+0x108>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	f47f af7d 	bne.w	8000d26 <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	f47f af70 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e776      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fdiv+0x118>
 8000e3e:	024b      	lsls	r3, r1, #9
 8000e40:	f43f af4c 	beq.w	8000cdc <__aeabi_fmul+0x114>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e76e      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1ca      	bne.n	8000dea <__aeabi_fdiv+0xba>
 8000e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e58:	f47f af5c 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e60:	f47f af3c 	bne.w	8000cdc <__aeabi_fmul+0x114>
 8000e64:	e75f      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e66:	bf00      	nop

08000e68 <__gesf2>:
 8000e68:	f04f 3cff 	mov.w	ip, #4294967295
 8000e6c:	e006      	b.n	8000e7c <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__lesf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	e002      	b.n	8000e7c <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__cmpsf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e8c:	bf18      	it	ne
 8000e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e92:	d011      	beq.n	8000eb8 <__cmpsf2+0x40>
 8000e94:	b001      	add	sp, #4
 8000e96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9a:	bf18      	it	ne
 8000e9c:	ea90 0f01 	teqne	r0, r1
 8000ea0:	bf58      	it	pl
 8000ea2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ea6:	bf88      	it	hi
 8000ea8:	17c8      	asrhi	r0, r1, #31
 8000eaa:	bf38      	it	cc
 8000eac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb0:	bf18      	it	ne
 8000eb2:	f040 0001 	orrne.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	d102      	bne.n	8000ec4 <__cmpsf2+0x4c>
 8000ebe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec2:	d105      	bne.n	8000ed0 <__cmpsf2+0x58>
 8000ec4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec8:	d1e4      	bne.n	8000e94 <__cmpsf2+0x1c>
 8000eca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ece:	d0e1      	beq.n	8000e94 <__cmpsf2+0x1c>
 8000ed0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_cfrcmple>:
 8000ed8:	4684      	mov	ip, r0
 8000eda:	4608      	mov	r0, r1
 8000edc:	4661      	mov	r1, ip
 8000ede:	e7ff      	b.n	8000ee0 <__aeabi_cfcmpeq>

08000ee0 <__aeabi_cfcmpeq>:
 8000ee0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee2:	f7ff ffc9 	bl	8000e78 <__cmpsf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	bf48      	it	mi
 8000eea:	f110 0f00 	cmnmi.w	r0, #0
 8000eee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef0 <__aeabi_fcmpeq>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff fff4 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000ef8:	bf0c      	ite	eq
 8000efa:	2001      	moveq	r0, #1
 8000efc:	2000      	movne	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmplt>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffea 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f0c:	bf34      	ite	cc
 8000f0e:	2001      	movcc	r0, #1
 8000f10:	2000      	movcs	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmple>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffe0 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpge>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffd2 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f34:	bf94      	ite	ls
 8000f36:	2001      	movls	r0, #1
 8000f38:	2000      	movhi	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmpgt>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffc8 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f48:	bf34      	ite	cc
 8000f4a:	2001      	movcc	r0, #1
 8000f4c:	2000      	movcs	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_f2iz>:
 8000f54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f5c:	d30f      	bcc.n	8000f7e <__aeabi_f2iz+0x2a>
 8000f5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f66:	d90d      	bls.n	8000f84 <__aeabi_f2iz+0x30>
 8000f68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	bf18      	it	ne
 8000f7a:	4240      	negne	r0, r0
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2iz+0x3a>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d105      	bne.n	8000f9a <__aeabi_f2iz+0x46>
 8000f8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f92:	bf08      	it	eq
 8000f94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2uiz>:
 8000fa0:	0042      	lsls	r2, r0, #1
 8000fa2:	d20e      	bcs.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30b      	bcc.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d409      	bmi.n	8000fc8 <__aeabi_f2uiz+0x28>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2uiz+0x32>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d102      	bne.n	8000fd8 <__aeabi_f2uiz+0x38>
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd6:	4770      	bx	lr
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <Timer1_Interrupt>:
unsigned char KeyboardReadFlag = 0;
//unsigned char LedBlinkFlag = 0;
//unsigned char RFIDFlag = 0;

void Timer1_Interrupt()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	if(Timer1Cnt == 1000)
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <Timer1_Interrupt+0x30>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fec:	d105      	bne.n	8000ffa <Timer1_Interrupt+0x1a>
	{
		KeyboardReadFlag = 1;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Timer1_Interrupt+0x34>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
		Timer1Cnt = 0;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <Timer1_Interrupt+0x30>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
	}
	++Timer1Cnt;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <Timer1_Interrupt+0x30>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <Timer1_Interrupt+0x30>)
 8001004:	801a      	strh	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000120 	.word	0x20000120
 8001014:	20000122 	.word	0x20000122

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f005 f8b6 	bl	800618c <HAL_Init>
  /* USER CODE BEGIN Init */
  //CppMain(); // init CPP objects
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f80e 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f8ee 	bl	8001204 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001028:	f000 f850 	bl	80010cc <MX_TIM1_Init>
  MX_TIM2_Init();
 800102c:	f000 f89e 	bl	800116c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <main+0x24>)
 8001032:	f006 f875 	bl	8007120 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CppMain();
 8001036:	f000 fc4b 	bl	80018d0 <CppMain>

  while (1)
 800103a:	e7fe      	b.n	800103a <main+0x22>
 800103c:	20000090 	.word	0x20000090

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	; 0x40
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2228      	movs	r2, #40	; 0x28
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f006 fe8e 	bl	8007d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800107e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fbc7 	bl	800681c <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001094:	f000 f902 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2102      	movs	r1, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fe34 	bl	8006d20 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010be:	f000 f8ed 	bl	800129c <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3740      	adds	r7, #64	; 0x40
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_TIM1_Init+0x98>)
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <MX_TIM1_Init+0x9c>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80010f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_TIM1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_TIM1_Init+0x98>)
 80010fe:	2201      	movs	r2, #1
 8001100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_TIM1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM1_Init+0x98>)
 8001116:	f005 ff69 	bl	8006fec <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 f8bc 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM1_Init+0x98>)
 8001132:	f006 f94f 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800113c:	f000 f8ae 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM1_Init+0x98>)
 800114e:	f006 fb2b 	bl	80077a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 f8a0 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000090 	.word	0x20000090
 8001168:	40012c00 	.word	0x40012c00

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM2_Init+0x94>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM2_Init+0x94>)
 8001192:	2247      	movs	r2, #71	; 0x47
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM2_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM2_Init+0x94>)
 800119e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_TIM2_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_TIM2_Init+0x94>)
 80011b2:	f005 ff1b 	bl	8006fec <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 f86e 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ce:	f006 f901 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 f860 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ea:	f006 fadd 	bl	80077a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 f852 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000d8 	.word	0x200000d8

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_GPIO_Init+0x90>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <MX_GPIO_Init+0x90>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_GPIO_Init+0x90>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_GPIO_Init+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_GPIO_Init+0x90>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_GPIO_Init+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_GPIO_Init+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <MX_GPIO_Init+0x90>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_GPIO_Init+0x90>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DQ_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001260:	2200      	movs	r2, #0
 8001262:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_GPIO_Init+0x94>)
 8001268:	f005 fabf 	bl	80067ea <HAL_GPIO_WritePin>
                          |CLK_Pin|SDO_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DQ_Pin PB3 PB4 PB5
                           CLK_Pin SDO_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = DQ_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800126c:	f242 33f8 	movw	r3, #9208	; 0x23f8
 8001270:	613b      	str	r3, [r7, #16]
                          |CLK_Pin|SDO_Pin|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x94>)
 8001286:	f005 f915 	bl	80064b4 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	40010c00 	.word	0x40010c00

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_MspInit+0x5c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_MspInit+0x5c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x5c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x5c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_MspInit+0x60>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_MspInit+0x60>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a16      	ldr	r2, [pc, #88]	; (8001374 <HAL_TIM_Base_MspInit+0x68>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d114      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 8001324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2019      	movs	r0, #25
 800133c:	f005 f883 	bl	8006446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001340:	2019      	movs	r0, #25
 8001342:	f005 f89c 	bl	800647e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001346:	e010      	b.n	800136a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0x6c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012c00 	.word	0x40012c00
 8001378:	40021000 	.word	0x40021000

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler+0x4>

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f004 ff29 	bl	8006218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
 Timer1_Interrupt();
 80013d0:	f7ff fe06 	bl	8000fe0 <Timer1_Interrupt>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <TIM1_UP_IRQHandler+0x14>)
 80013d6:	f005 fef5 	bl	80071c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000090 	.word	0x20000090

080013e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <_kill>:

int _kill(int pid, int sig)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013fc:	f006 fc56 	bl	8007cac <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	2216      	movs	r2, #22
 8001404:	601a      	str	r2, [r3, #0]
  return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_exit>:

void _exit (int status)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800141a:	f04f 31ff 	mov.w	r1, #4294967295
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffe7 	bl	80013f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001424:	e7fe      	b.n	8001424 <_exit+0x12>
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f006 fc28 	bl	8007cac <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20005000 	.word	0x20005000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000124 	.word	0x20000124
 8001490:	20000140 	.word	0x20000140

08001494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c6:	f7ff ffe5 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f006 fbf5 	bl	8007cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fda3 	bl	8001018 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014dc:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 80014e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014e4:	20000140 	.word	0x20000140

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <_ZN14AdaptiveFilterC1Ev>:
 *      Author: abramov.a
 */

#include <AdaptiveFilter.hpp>

AdaptiveFilter::AdaptiveFilter() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <_ZN14AdaptiveFilterC1Ev+0x2c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
	current_val = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
	k           = 1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001508:	609a      	str	r2, [r3, #8]
}
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	08008110 	.word	0x08008110

0800151c <_ZN14AdaptiveFilterD1Ev>:

AdaptiveFilter::~AdaptiveFilter() {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <_ZN14AdaptiveFilterD1Ev+0x1c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	08008110 	.word	0x08008110

0800153c <_ZN14AdaptiveFilterD0Ev>:
AdaptiveFilter::~AdaptiveFilter() {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
}
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe9 	bl	800151c <_ZN14AdaptiveFilterD1Ev>
 800154a:	210c      	movs	r1, #12
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f006 f99d 	bl	800788c <_ZdlPvj>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
 8001560:	2300      	movs	r3, #0
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 80015bc:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fab5 	bl	8001b32 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	e004      	b.n	80015d6 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe fdc7 	bl	8000160 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	bf00      	nop
      }
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_ZNSt11char_traitsIcE4moveEPcPKcj>:
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <_ZNSt11char_traitsIcE4moveEPcPKcj+0x16>
	  return __s1;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	e012      	b.n	800161a <_ZNSt11char_traitsIcE4moveEPcPKcj+0x3c>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80015f4:	f7ff ffb2 	bl	800155c <_ZSt21is_constant_evaluatedv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <_ZNSt11char_traitsIcE4moveEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 fae5 	bl	8001bd2 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj>
 8001608:	4603      	mov	r3, r0
 800160a:	e006      	b.n	800161a <_ZNSt11char_traitsIcE4moveEPcPKcj+0x3c>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f006 fb93 	bl	8007d3c <memmove>
 8001616:	4603      	mov	r3, r0
 8001618:	bf00      	nop
      }
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_ZNSt11char_traitsIcE4copyEPcPKcj>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x16>
	  return __s1;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	e015      	b.n	8001664 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001638:	f7ff ff90 	bl	800155c <_ZSt21is_constant_evaluatedv>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fafd 	bl	8001c46 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>
 800164c:	4603      	mov	r3, r0
 800164e:	e009      	b.n	8001664 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	f006 fb60 	bl	8007d20 <memcpy>
 8001660:	4603      	mov	r3, r0
 8001662:	bf00      	nop
      }
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZNSt11char_traitsIcE6assignEPcjc>:

      static _GLIBCXX20_CONSTEXPR char_type*
      assign(char_type* __s, size_t __n, char_type __a)
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
      {
	if (__n == 0)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <_ZNSt11char_traitsIcE6assignEPcjc+0x18>
	  return __s;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	e014      	b.n	80016ae <_ZNSt11char_traitsIcE6assignEPcjc+0x42>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001684:	f7ff ff6a 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <_ZNSt11char_traitsIcE6assignEPcjc+0x32>
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	461a      	mov	r2, r3
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fb04 	bl	8001ca2 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcjc>
 800169a:	4603      	mov	r3, r0
 800169c:	e007      	b.n	80016ae <_ZNSt11char_traitsIcE6assignEPcjc+0x42>
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	4619      	mov	r1, r3
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f006 fb63 	bl	8007d70 <memset>
 80016aa:	4603      	mov	r3, r0
 80016ac:	bf00      	nop
      }
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d019      	beq.n	800172a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	330c      	adds	r3, #12
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
        }
    }
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	08008118 	.word	0x08008118

08001748 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3304      	adds	r3, #4
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fb17 	bl	8001d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZNSt10shared_ptrI7DS18B20ED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffea 	bl	8001748 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fafc 	bl	8001d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZNSt10shared_ptrI14AdaptiveFilterED1Ev>:
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ffea 	bl	800177e <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3304      	adds	r3, #4
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fae1 	bl	8001d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZNSt10shared_ptrI11RelayOutputED1Ev>:
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ffea 	bl	80017b4 <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1d1a      	adds	r2, r3, #4
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3304      	adds	r3, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f000 fb2b 	bl	8001e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZNSt10shared_ptrI14AdaptiveFilterEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffdf 	bl	80017ea <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1d1a      	adds	r2, r3, #4
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3304      	adds	r3, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f000 fb05 	bl	8001e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_ZNSt10shared_ptrI7DS18B20EC1ERKS1_>:
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffdf 	bl	8001836 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1d1a      	adds	r2, r3, #4
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	3304      	adds	r3, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f000 fadf 	bl	8001e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZNSt10shared_ptrI11RelayOutputEC1ERKS1_>:
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ffdf 	bl	8001882 <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <CppMain>:
#include "CppMain.hpp"


// Main Cpp event loop to run application
void CppMain()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0c4      	sub	sp, #272	; 0x110
 80018d4:	af02      	add	r7, sp, #8
	// initialize custom timer for temp sensor
	TIMER timing = TIMER(&htim2);
 80018d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018da:	4987      	ldr	r1, [pc, #540]	; (8001af8 <CppMain+0x228>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 fc25 	bl	800612c <_ZN5TIMERC1EP17TIM_HandleTypeDef>
	// initialize temp sensor
	std::shared_ptr<DS18B20> temp = std::make_shared<DS18B20>(&timing);
 80018e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018ee:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa29 	bl	8001d4c <_ZSt11make_sharedI7DS18B20JP5TIMEREESt10shared_ptrIT_EDpOT0_>
	//DS18B20 temp = DS18B20(&timing);
	// initialize display
	TM1637 display;
 80018fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ffc0 	bl	8004884 <_ZN6TM1637C1Ev>
	display.Initialize(0);
 8001904:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f9c0 	bl	8004c90 <_ZN6TM163710InitializeEh>
	std::string temperature_str {"none"};
 8001910:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001914:	4618      	mov	r0, r3
 8001916:	f005 ffcf 	bl	80078b8 <_ZNSaIcEC1Ev>
 800191a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800191e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001922:	4976      	ldr	r1, [pc, #472]	; (8001afc <CppMain+0x22c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fa41 	bl	8001dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800192a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800192e:	4618      	mov	r0, r3
 8001930:	f005 ffc4 	bl	80078bc <_ZNSaIcED1Ev>
	//initialize filter
	std::shared_ptr<AdaptiveFilter> filter = std::make_shared<AdaptiveFilter>();
 8001934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fa5e 	bl	8001dfa <_ZSt11make_sharedI14AdaptiveFilterJEESt10shared_ptrIT_EDpOT0_>
	// initialize relay output device
	std::shared_ptr<RelayOutput> relay = std::make_shared<RelayOutput>();
 800193e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fa73 	bl	8001e2e <_ZSt11make_sharedI11RelayOutputJEESt10shared_ptrIT_EDpOT0_>
	// initialize controller
	//OnOffRegulator regulator(30, 1, filter, temp, relay);
	PID_Regulator regulator(30, 10, filter, temp, relay);
 8001948:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800194c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff5f 	bl	8001816 <_ZNSt10shared_ptrI14AdaptiveFilterEC1ERKS1_>
 8001958:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800195c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff7d 	bl	8001862 <_ZNSt10shared_ptrI7DS18B20EC1ERKS1_>
 8001968:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800196c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff9b 	bl	80018ae <_ZNSt10shared_ptrI11RelayOutputEC1ERKS1_>
 8001978:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800197c:	1d38      	adds	r0, r7, #4
 800197e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	220a      	movs	r2, #10
 800198e:	211e      	movs	r1, #30
 8001990:	f002 fd1a 	bl	80043c8 <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE>
 8001994:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff19 	bl	80017d0 <_ZNSt10shared_ptrI11RelayOutputED1Ev>
 800199e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fede 	bl	8001764 <_ZNSt10shared_ptrI7DS18B20ED1Ev>
 80019a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fef4 	bl	800179a <_ZNSt10shared_ptrI14AdaptiveFilterED1Ev>


	while(true)
	{
		if (KeyboardReadFlag == 1)
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <CppMain+0x230>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1fb      	bne.n	80019b2 <CppMain+0xe2>
		{
			// Temperature support
			//regulator.TemperatureSupport(HEATER);
			//currentTemperature = regulator.GetTemperature();
			float t = temp->readTemperature();
 80019ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fa66 	bl	8001e90 <_ZNKSt19__shared_ptr_accessI7DS18B20LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fc90 	bl	80042ec <_ZN7DS18B2015readTemperatureEv>
 80019cc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

			uint8_t whole = t;
 80019d0:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80019d4:	f7ff fae4 	bl	8000fa0 <__aeabi_f2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			char wholeD = whole/10 + 48;
 80019de:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80019e2:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <CppMain+0x234>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3330      	adds	r3, #48	; 0x30
 80019ee:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			char wholeU = whole%10 + 48;
 80019f2:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <CppMain+0x234>)
 80019f8:	fba3 1302 	umull	r1, r3, r3, r2
 80019fc:	08d9      	lsrs	r1, r3, #3
 80019fe:	460b      	mov	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3330      	adds	r3, #48	; 0x30
 8001a0c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			uint8_t fract = (t - whole)*100;
 8001a10:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f883 	bl	8000b20 <__aeabi_i2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001a22:	f7fe ffc7 	bl	80009b4 <__aeabi_fsub>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4937      	ldr	r1, [pc, #220]	; (8001b08 <CppMain+0x238>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f8cc 	bl	8000bc8 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fab4 	bl	8000fa0 <__aeabi_f2uiz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
			char fractD = fract/10 + 48;
 8001a3e:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <CppMain+0x234>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3330      	adds	r3, #48	; 0x30
 8001a4e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			char fractU = fract%10 + 48;
 8001a52:	f897 2100 	ldrb.w	r2, [r7, #256]	; 0x100
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <CppMain+0x234>)
 8001a58:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5c:	08d9      	lsrs	r1, r3, #3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3330      	adds	r3, #48	; 0x30
 8001a6c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

			temperature_str = wholeD;
 8001a70:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8001a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fa14 	bl	8001ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEc>
			temperature_str.push_back(wholeU);
 8001a80:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8001a84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fa1d 	bl	8001eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			temperature_str.push_back(fractD);
 8001a90:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8001a94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fa15 	bl	8001eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			temperature_str.push_back(fractU);
 8001aa0:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8001aa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fa0d 	bl	8001eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>

			// show temperature on display
			display.DisplayClear();
 8001ab0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f951 	bl	8004d5c <_ZN6TM163712DisplayClearEv>
			display.DisplayHandle(6, temperature_str);
 8001aba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001abe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fa34 	bl	8001f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001aca:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001ace:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ad2:	2106      	movs	r1, #6
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 f981 	bl	8004ddc <_ZN6TM163713DisplayHandleEhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ada:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8fd 	bl	8001cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			// correct temperature
			regulator.TemperatureSupport(t);
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fda6 	bl	800463c <_ZN13PID_Regulator18TemperatureSupportEf>

			//auto currentTemp = thermometer.readTemperature();
			KeyboardReadFlag = 0;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <CppMain+0x230>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]

			// Count the number of CP ticks
			//reg.TemperatureSupport(t);
		}
	}
 8001af6:	e75c      	b.n	80019b2 <CppMain+0xe2>
 8001af8:	200000d8 	.word	0x200000d8
 8001afc:	08008014 	.word	0x08008014
 8001b00:	20000122 	.word	0x20000122
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	42c80000 	.word	0x42c80000

08001b0c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	2200      	movs	r2, #0
 8001b46:	72fa      	strb	r2, [r7, #11]
 8001b48:	f107 020b 	add.w	r2, r7, #11
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ffdc 	bl	8001b0c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001b66:	e7ea      	b.n	8001b3e <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 8001b68:	68fb      	ldr	r3, [r7, #12]
    }
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZSt13copy_backwardIPKcPcET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001b72:	b590      	push	{r4, r7, lr}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fa0e 	bl	8001fa0 <_ZSt12__miter_baseIPKcET_S2_>
 8001b84:	4604      	mov	r4, r0
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f000 fa0a 	bl	8001fa0 <_ZSt12__miter_baseIPKcET_S2_>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4619      	mov	r1, r3
 8001b92:	4620      	mov	r0, r4
 8001b94:	f000 fa0e 	bl	8001fb4 <_ZSt22__copy_move_backward_aILb0EPKcPcET1_T0_S4_S3_>
 8001b98:	4603      	mov	r3, r0
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}

08001ba2 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f9f6 	bl	8001fa0 <_ZSt12__miter_baseIPKcET_S2_>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	f000 f9f2 	bl	8001fa0 <_ZSt12__miter_baseIPKcET_S2_>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f000 fa19 	bl	8001ffa <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8001bc8:	4603      	mov	r3, r0
    }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}

08001bd2 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj>:
    char_traits<_CharT>::
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
      if (__n == 0)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x16>
	return __s1;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	e02a      	b.n	8001c3e <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x6c>
      if (std::is_constant_evaluated())
 8001be8:	f7ff fcb8 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01e      	beq.n	8001c30 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x5e>
	  if (__s1 > __s2 && __s1 < __s2 + __n)
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x4a>
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d20a      	bcs.n	8001c1c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x4a>
	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	18d1      	adds	r1, r2, r3
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	461a      	mov	r2, r3
 8001c14:	68b8      	ldr	r0, [r7, #8]
 8001c16:	f7ff ffac 	bl	8001b72 <_ZSt13copy_backwardIPKcPcET0_T_S4_S3_>
 8001c1a:	e007      	b.n	8001c2c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x5a>
	    std::copy(__s2, __s2 + __n, __s1);
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4619      	mov	r1, r3
 8001c26:	68b8      	ldr	r0, [r7, #8]
 8001c28:	f7ff ffbb 	bl	8001ba2 <_ZSt4copyIPKcPcET0_T_S4_S3_>
	  return __s1;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	e006      	b.n	8001c3e <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x6c>
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f006 f881 	bl	8007d3c <memmove>
 8001c3a:	4603      	mov	r3, r0
						    __n * sizeof(char_type)));
 8001c3c:	bf00      	nop
    }
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>:
    char_traits<_CharT>::
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
      std::copy(__s2, __s2 + __n, __s1);
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7ff ffa0 	bl	8001ba2 <_ZSt4copyIPKcPcET0_T_S4_S3_>
      return __s1;
 8001c62:	68fb      	ldr	r3, [r7, #12]
    }
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZSt6fill_nIPcjcET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001c78:	68fc      	ldr	r4, [r7, #12]
 8001c7a:	68b8      	ldr	r0, [r7, #8]
 8001c7c:	f7ff fc80 	bl	8001580 <_ZSt17__size_to_integerj>
 8001c80:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f9da 	bl	8002040 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001c8c:	4633      	mov	r3, r6
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4629      	mov	r1, r5
 8001c92:	4620      	mov	r0, r4
 8001c94:	f000 f9dd 	bl	8002052 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag>
 8001c98:	4603      	mov	r3, r0
    }
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca2 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcjc>:
    char_traits<_CharT>::
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
      std::fill_n(__s, __n, __a);
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff ffd8 	bl	8001c6c <_ZSt6fill_nIPcjcET_S1_T0_RKT1_>
      return __s;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f005 fdf4 	bl	80078bc <_ZNSaIcED1Ev>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
      { _M_dispose(); }
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f9f9 	bl	80020de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ffe9 	bl	8001cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
    public:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
      { delete this; }
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZSt11make_sharedI7DS18B20JP5TIMEREESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fa8a 	bl	8002274 <_ZNSaI7DS18B20EC1Ev>
				       std::forward<_Args>(__args)...);
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f000 fa9d 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f107 010c 	add.w	r1, r7, #12
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 faa0 	bl	80022b4 <_ZSt15allocate_sharedI7DS18B20SaIS0_EJP5TIMEREESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fa87 	bl	800228c <_ZNSaI7DS18B20ED1Ev>
				       std::forward<_Args>(__args)...);
 8001d7e:	bf00      	nop
    }
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc98 	bl	80016d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8001db8:	68fc      	ldr	r4, [r7, #12]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f96f 	bl	800209e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f000 f977 	bl	80020ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	const _CharT* __end = __s ? __s + traits_type::length(__s)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f7ff fbec 	bl	80015b0 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4413      	add	r3, r2
 8001dde:	e000      	b.n	8001de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x36>
 8001de0:	2301      	movs	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, random_access_iterator_tag());
 8001de4:	462b      	mov	r3, r5
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa8a 	bl	8002304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}

08001dfa <_ZSt11make_sharedI14AdaptiveFilterJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fac4 	bl	8002394 <_ZNSaI14AdaptiveFilterEC1Ev>
				       std::forward<_Args>(__args)...);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f107 020c 	add.w	r2, r7, #12
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fad3 	bl	80023c0 <_ZSt15allocate_sharedI14AdaptiveFilterSaIS0_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fac4 	bl	80023ac <_ZNSaI14AdaptiveFilterED1Ev>
				       std::forward<_Args>(__args)...);
 8001e24:	bf00      	nop
    }
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_ZSt11make_sharedI11RelayOutputJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 face 	bl	80023dc <_ZNSaI11RelayOutputEC1Ev>
				       std::forward<_Args>(__args)...);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f107 020c 	add.w	r2, r7, #12
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fadd 	bl	8002408 <_ZSt15allocate_sharedI11RelayOutputSaIS0_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 face 	bl	80023f4 <_ZNSaI11RelayOutputED1Ev>
				       std::forward<_Args>(__args)...);
 8001e58:	bf00      	nop
    }
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	601a      	str	r2, [r3, #0]
	if (_M_pi != 0)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc18 	bl	80016b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZNKSt19__shared_ptr_accessI7DS18B20LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	return _M_get();
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fac3 	bl	8002424 <_ZNKSt19__shared_ptr_accessI7DS18B20LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8001e9e:	4603      	mov	r3, r0
      }
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEc>:
      operator=(_CharT __c)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
	this->assign(1, __c);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2101      	movs	r1, #1
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fabe 	bl	800243c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	return *this;
 8001ec0:	687b      	ldr	r3, [r7, #4]
      }
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
      /**
       *  @brief  Append a single character.
       *  @param __c  Character to append.
       */
      void
      push_back(_CharT __c)
 8001eca:	b590      	push	{r4, r7, lr}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af02      	add	r7, sp, #8
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70fb      	strb	r3, [r7, #3]
      {
	const size_type __size = this->size();
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff11 	bl	8001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001edc:	60f8      	str	r0, [r7, #12]
	if (__size + 1 > this->capacity())
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1c5c      	adds	r4, r3, #1
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f993 	bl	800220e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	429c      	cmp	r4, r3
 8001eec:	bf8c      	ite	hi
 8001eee:	2301      	movhi	r3, #1
 8001ef0:	2300      	movls	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x3e>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 8001ef8:	2301      	movs	r3, #1
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2300      	movs	r3, #0
 8001efe:	2200      	movs	r2, #0
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fab1 	bl	800246a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
	traits_type::assign(this->_M_data()[__size], __c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8bd 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	1cfa      	adds	r2, r7, #3
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fb3b 	bl	8001594 <_ZNSt11char_traitsIcE6assignERcRKc>
	this->_M_set_length(__size + 1);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f957 	bl	80021d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
      basic_string(const basic_string& __str)
 8001f32:	b5b0      	push	{r4, r5, r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 8001f3c:	687c      	ldr	r4, [r7, #4]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ad 	bl	800209e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001f44:	4605      	mov	r5, r0
 8001f46:	6838      	ldr	r0, [r7, #0]
 8001f48:	f000 fb00 	bl	800254c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 faeb 	bl	8002530 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4629      	mov	r1, r5
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 f8e6 	bl	8002134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f005 fca5 	bl	80078bc <_ZNSaIcED1Ev>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f000 f888 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f000 f884 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f80:	4604      	mov	r4, r0
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7ff fec6 	bl	8001d14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4423      	add	r3, r4
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4629      	mov	r1, r5
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fae5 	bl	8002560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bdb0      	pop	{r4, r5, r7, pc}

08001fa0 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <_ZSt22__copy_move_backward_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fadc 	bl	800257e <_ZSt12__niter_baseIPKcET_S2_>
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f000 fad8 	bl	800257e <_ZSt12__niter_baseIPKcET_S2_>
 8001fce:	4605      	mov	r5, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fadd 	bl	8002592 <_ZSt12__niter_baseIPcET_S1_>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f000 fae1 	bl	80025a6 <_ZSt23__copy_move_backward_a1ILb0EPKcPcET1_T0_S4_S3_>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 faeb 	bl	80025c6 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8001ff0:	4603      	mov	r3, r0
    }
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}

08001ffa <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001ffa:	b5b0      	push	{r4, r5, r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fab9 	bl	800257e <_ZSt12__niter_baseIPKcET_S2_>
 800200c:	4604      	mov	r4, r0
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f000 fab5 	bl	800257e <_ZSt12__niter_baseIPKcET_S2_>
 8002014:	4605      	mov	r5, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 faba 	bl	8002592 <_ZSt12__niter_baseIPcET_S1_>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4629      	mov	r1, r5
 8002024:	4620      	mov	r0, r4
 8002026:	f000 fad9 	bl	80025dc <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800202a:	4602      	mov	r2, r0
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fac8 	bl	80025c6 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8002036:	4603      	mov	r3, r0
    }
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}

08002040 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	e00a      	b.n	8002080 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4413      	add	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4619      	mov	r1, r3
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fac1 	bl	80025fc <_ZSt8__fill_aIPccEvT_S1_RKT0_>
      return __first + __n;
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4413      	add	r3, r2
    }
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
      { return _M_dataplus._M_p; }
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3308      	adds	r3, #8
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fab5 	bl	800261a <_ZNSt14pointer_traitsIPcE10pointer_toERc>
 80020b0:	4603      	mov	r3, r0
      }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
	: allocator_type(__a), _M_p(__dat) { }
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f005 fbf6 	bl	80078ba <_ZNSaIcEC1ERKS_>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	if (!_M_is_local())
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f83a 	bl	8002160 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x26>
	  _M_destroy(_M_allocated_capacity);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fafc 	bl	80026fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
      }
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ffed 	bl	8002120 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
 8002146:	4603      	mov	r3, r0
 8002148:	4619      	mov	r1, r3
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f005 fbb5 	bl	80078ba <_ZNSaIcEC1ERKS_>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
      { return _M_data() == _M_local_data(); }
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff8d 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800216e:	4604      	mov	r4, r0
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fada 	bl	800272a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002176:	4603      	mov	r3, r0
 8002178:	429c      	cmp	r4, r3
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}

0800218a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
      { _M_dataplus._M_p = __p; }
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
      _M_capacity(size_type __capacity)
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>:
      _M_length(size_type __length)
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
      { _M_string_length = __length; }
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
      _M_set_length(size_type __n)
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	_M_length(__n);
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffea 	bl	80021be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	traits_type::assign(_M_data()[__n], _CharT());
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff4c 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	73fa      	strb	r2, [r7, #15]
 80021fa:	f107 020f 	add.w	r2, r7, #15
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f9c7 	bl	8001594 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return _M_is_local() ? size_type(_S_local_capacity)
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x18>
 8002222:	230f      	movs	r3, #15
	                     : _M_allocated_capacity;
 8002224:	e001      	b.n	800222a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x1c>
	return _M_is_local() ? size_type(_S_local_capacity)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
      }
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
      { }
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0800817c 	.word	0x0800817c

08002254 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
      { }
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe9 	bl	8002234 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002262:	210c      	movs	r1, #12
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f005 fb11 	bl	800788c <_ZdlPvj>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZNSaI7DS18B20EC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fa83 	bl	8002788 <_ZN9__gnu_cxx13new_allocatorI7DS18B20EC1Ev>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZNSaI7DS18B20ED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <_ZSt15allocate_sharedI7DS18B20SaIS0_EJP5TIMEREESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80022c0:	68bc      	ldr	r4, [r7, #8]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffec 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4621      	mov	r1, r4
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa64 	bl	800279c <_ZNSt10shared_ptrI7DS18B20EC1ISaIS0_EJP5TIMEREEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80022dc:	b5b0      	push	{r4, r5, r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80022e6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fa7a 	bl	80027e4 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80022f0:	462a      	mov	r2, r5
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 fa7e 	bl	80027f6 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80022fa:	4603      	mov	r3, r0
    }
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}

08002304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002312:	68b8      	ldr	r0, [r7, #8]
 8002314:	f000 fa57 	bl	80027c6 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8002332:	f005 fb7b 	bl	8007a2c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	68b8      	ldr	r0, [r7, #8]
 800233a:	f7ff ffcf 	bl	80022dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800233e:	4603      	mov	r3, r0
 8002340:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d910      	bls.n	800236a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	4619      	mov	r1, r3
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f96f 	bl	8002634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff ff15 	bl	800218a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4619      	mov	r1, r3
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff ff1d 	bl	80021a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fe8c 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002370:	4603      	mov	r3, r0
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fa4b 	bl	8002812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4619      	mov	r1, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff ff29 	bl	80021d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	0800801c 	.word	0x0800801c

08002394 <_ZNSaI14AdaptiveFilterEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa4a 	bl	8002836 <_ZN9__gnu_cxx13new_allocatorI14AdaptiveFilterEC1Ev>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZNSaI14AdaptiveFilterED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <_ZSt15allocate_sharedI14AdaptiveFilterSaIS0_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa3b 	bl	800284a <_ZNSt10shared_ptrI14AdaptiveFilterEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSaI11RelayOutputEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa3f 	bl	8002868 <_ZN9__gnu_cxx13new_allocatorI11RelayOutputEC1Ev>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_ZNSaI11RelayOutputED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <_ZSt15allocate_sharedI11RelayOutputSaIS0_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa30 	bl	800287c <_ZNSt10shared_ptrI11RelayOutputEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZNKSt19__shared_ptr_accessI7DS18B20LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fa34 	bl	800289a <_ZNKSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
       *
       *  This function sets the value of this string to @a __n copies of
       *  character @a __c.
       */
      basic_string&
      assign(size_type __n, _CharT __c)
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	71fb      	strb	r3, [r7, #7]
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7ff fc57 	bl	8001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002450:	4602      	mov	r2, r0
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2100      	movs	r1, #0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa28 	bl	80028b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
	}
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
 800246a:	b590      	push	{r4, r7, lr}
 800246c:	b089      	sub	sp, #36	; 0x24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
	      size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fc4b 	bl	8001d14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800247e:	4602      	mov	r2, r0
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	61fb      	str	r3, [r7, #28]

      size_type __new_capacity = length() + __len2 - __len1;
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fc42 	bl	8001d14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002490:	4602      	mov	r2, r0
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
      pointer __r = _M_create(__new_capacity, capacity());
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff feb6 	bl	800220e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f8c2 	bl	8002634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80024b0:	61b8      	str	r0, [r7, #24]

      if (__pos)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x60>
	this->_S_copy(__r, _M_data(), __pos);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff fde5 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80024be:	4603      	mov	r3, r0
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4619      	mov	r1, r3
 80024c4:	69b8      	ldr	r0, [r7, #24]
 80024c6:	f000 fa57 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__s && __len2)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
	this->_S_copy(__r + __pos, __s, __len2);
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fa49 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__how_much)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d011      	beq.n	8002510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0xa6>
	this->_S_copy(__r + __pos + __len2,
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	4413      	add	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	18d4      	adds	r4, r2, r3
		      _M_data() + __pos + __len1, __how_much);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fdc6 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80024fc:	4601      	mov	r1, r0
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	440b      	add	r3, r1
	this->_S_copy(__r + __pos + __len2,
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4619      	mov	r1, r3
 800250a:	4620      	mov	r0, r4
 800250c:	f000 fa34 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>

      _M_dispose();
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fde4 	bl	80020de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fe36 	bl	800218a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4619      	mov	r1, r3
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fe3e 	bl	80021a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
    }
 8002528:	bf00      	nop
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}

08002530 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa31 	bl	80029a6 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fa25 	bl	80029c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
    { return __it; }
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <_ZSt23__copy_move_backward_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa13 	bl	80029e2 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
    { return __res; }
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fa15 	bl	8002a1c <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZSt8__fill_aIPccEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fa22 	bl	8002a56 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZNSt14pointer_traitsIPcE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa42 	bl	8002aac <_ZSt9addressofIcEPT_RS0_>
 8002628:	4603      	mov	r3, r0
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
      if (__capacity > max_size())
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	681c      	ldr	r4, [r3, #0]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa3d 	bl	8002ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800264a:	4603      	mov	r3, r0
 800264c:	429c      	cmp	r4, r3
 800264e:	bf8c      	ite	hi
 8002650:	2301      	movhi	r3, #1
 8002652:	2300      	movls	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
	std::__throw_length_error(__N("basic_string::_M_create"));
 800265a:	481a      	ldr	r0, [pc, #104]	; (80026c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x90>)
 800265c:	f005 f9e9 	bl	8007a32 <_ZSt20__throw_length_errorPKc>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d21c      	bcs.n	80026a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	429a      	cmp	r2, r3
 8002674:	d216      	bcs.n	80026a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	  __capacity = 2 * __old_capacity;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	601a      	str	r2, [r3, #0]
	  if (__capacity > max_size())
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	681c      	ldr	r4, [r3, #0]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa1e 	bl	8002ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 8002688:	4603      	mov	r3, r0
 800268a:	429c      	cmp	r4, r3
 800268c:	bf8c      	ite	hi
 800268e:	2301      	movhi	r3, #1
 8002690:	2300      	movls	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	    __capacity = max_size();
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa13 	bl	8002ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800269e:	4602      	mov	r2, r0
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	601a      	str	r2, [r3, #0]
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fd31 	bl	800210c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 fa17 	bl	8002ae8 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 80026ba:	4603      	mov	r3, r0
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	08008048 	.word	0x08008048

080026c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71fb      	strb	r3, [r7, #7]
	if (__n == 1)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x20>
	  traits_type::assign(*__d, __c);
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	4619      	mov	r1, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fe ff57 	bl	8001594 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 80026e6:	e005      	b.n	80026f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x2c>
	  traits_type::assign(__d, __n, __c);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7fe ffbc 	bl	800166c <_ZNSt11char_traitsIcE6assignEPcjc>
      }
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
      _M_destroy(size_type __size) throw()
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fd00 	bl	800210c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800270c:	4604      	mov	r4, r0
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fcba 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002714:	4601      	mov	r1, r0
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	461a      	mov	r2, r3
 800271c:	4620      	mov	r0, r4
 800271e:	f000 fa01 	bl	8002b24 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}

0800272a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3308      	adds	r3, #8
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fa13 	bl	8002b62 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>
 800273c:	4603      	mov	r3, r0
      }
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 8002746:	b590      	push	{r4, r7, lr}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
	if (this->max_size() - (this->size() - __n1) < __n2)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9b5 	bl	8002ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800275a:	4604      	mov	r4, r0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff face 	bl	8001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002762:	4602      	mov	r2, r0
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	4423      	add	r3, r4
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	bf8c      	ite	hi
 8002770:	2301      	movhi	r3, #1
 8002772:	2300      	movls	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x3a>
	  __throw_length_error(__N(__s));
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f005 f959 	bl	8007a32 <_ZSt20__throw_length_errorPKc>
      }
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}

08002788 <_ZN9__gnu_cxx13new_allocatorI7DS18B20EC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <_ZNSt10shared_ptrI7DS18B20EC1ISaIS0_EJP5TIMEREEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80027a8:	68fc      	ldr	r4, [r7, #12]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fd78 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 f9df 	bl	8002b7a <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJP5TIMEREEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}

080027c6 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
    }
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	461a      	mov	r2, r3
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f8a5 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_ZN9__gnu_cxx13new_allocatorI14AdaptiveFilterEC1Ev>:
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <_ZNSt10shared_ptrI14AdaptiveFilterEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f9ae 	bl	8002bba <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN9__gnu_cxx13new_allocatorI11RelayOutputEC1Ev>:
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_ZNSt10shared_ptrI11RelayOutputEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f9af 	bl	8002bee <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_ZNKSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
			  __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
		   _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0xc4>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff ff3e 	bl	8002746 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>

      const size_type __old_size = this->size();
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fa17 	bl	8001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80028d0:	61f8      	str	r0, [r7, #28]
      const size_type __new_size = __old_size + __n2 - __n1;
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	441a      	add	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	61bb      	str	r3, [r7, #24]

      if (__new_size <= this->capacity())
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fc95 	bl	800220e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01e      	beq.n	8002934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x84>
	{
	  pointer __p = this->_M_data() + __pos1;
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fbc6 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

	  const size_type __how_much = __old_size - __pos1 - __n1;
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad2      	subs	r2, r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	613b      	str	r3, [r7, #16]
	  if (__how_much && __n1 != __n2)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x94>
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d012      	beq.n	8002944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x94>
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	18d0      	adds	r0, r2, r3
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4619      	mov	r1, r3
 800292e:	f000 f978 	bl	8002c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8002932:	e007      	b.n	8002944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x94>
	}
      else
	this->_M_mutate(__pos1, __n1, 0, __n2);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fd93 	bl	800246a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>

      if (__n2)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0xb2>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fb9c 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4413      	add	r3, r2
 8002956:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff feb3 	bl	80026c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>

      this->_M_set_length(__new_size);
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fc37 	bl	80021d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      return *this;
 800296a:	68fb      	ldr	r3, [r7, #12]
    }
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08008060 	.word	0x08008060

08002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d104      	bne.n	8002994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7fe fe01 	bl	8001594 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8002992:	e004      	b.n	800299e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x26>
	  traits_type::copy(__d, __s, __n);
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fe fe42 	bl	8001622 <_ZNSt11char_traitsIcE4copyEPcPKcj>
      }
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f004 ff81 	bl	80078ba <_ZNSaIcEC1ERKS_>
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80029ce:	4623      	mov	r3, r4
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f94f 	bl	8002c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}

080029e2 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80029ee:	f7fe fdb5 	bl	800155c <_ZSt21is_constant_evaluatedv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_move_b(__first, __last, __result);
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f983 	bl	8002d08 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_>
 8002a02:	4603      	mov	r3, r0
 8002a04:	e006      	b.n	8002a14 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
				       _Category>::__copy_move_b(__first,
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f99d 	bl	8002d4a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 8002a10:	4603      	mov	r3, r0
								 __result);
 8002a12:	bf00      	nop
    }
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8002a28:	f7fe fd98 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f9a5 	bl	8002d86 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	e006      	b.n	8002a4e <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f9bf 	bl	8002dc8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	bf00      	nop
    }
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	75fb      	strb	r3, [r7, #23]
      if (std::is_constant_evaluated())
 8002a68:	f7fe fd78 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x32>
	  for (; __first != __last; ++__first)
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d014      	beq.n	8002aa4 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x4e>
	    *__first = __tmp;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	7dfa      	ldrb	r2, [r7, #23]
 8002a7e:	701a      	strb	r2, [r3, #0]
	  for (; __first != __last; ++__first)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e7f4      	b.n	8002a72 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x1c>
      if (const size_t __len = __last - __first)
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x50>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f005 f967 	bl	8007d70 <memset>
 8002aa2:	e000      	b.n	8002aa6 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x50>
	  return;
 8002aa4:	bf00      	nop
    }
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_ZSt9addressofIcEPT_RS0_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9a1 	bl	8002dfc <_ZSt11__addressofIcEPT_RS0_>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fd3d 	bl	800254c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f99b 	bl	8002e10 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8002ada:	4603      	mov	r3, r0
 8002adc:	3b01      	subs	r3, #1
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	60bb      	str	r3, [r7, #8]
      [[nodiscard,__gnu__::__always_inline__]]
      constexpr _Tp*
      allocate(size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8002afa:	f7fe fd2f 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002b04:	68b8      	ldr	r0, [r7, #8]
 8002b06:	f004 fec3 	bl	8007890 <_Znwj>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	e006      	b.n	8002b1c <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
#endif
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fb03 	bl	800311e <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	bf00      	nop
      { return __a.allocate(__n); }
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8002b3c:	f7fe fd0e 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	  {
	    ::operator delete(__p);
 8002b46:	69b8      	ldr	r0, [r7, #24]
 8002b48:	f004 fe9e 	bl	8007888 <_ZdlPv>
	    return;
 8002b4c:	e005      	b.n	8002b5a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	69b9      	ldr	r1, [r7, #24]
 8002b52:	69f8      	ldr	r0, [r7, #28]
 8002b54:	f000 fb00 	bl	8003158 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f95b 	bl	8002e26 <_ZSt9addressofIKcEPT_RS1_>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJP5TIMEREEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8002b7a:	b5b0      	push	{r4, r5, r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1d1c      	adds	r4, r3, #4
 8002b90:	68fd      	ldr	r5, [r7, #12]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fb84 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 f95a 	bl	8002e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7DS18B20SaIS4_EJP5TIMEREEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f9ac 	bl	8002f08 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}

08002bba <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f9af 	bl	8002f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I14AdaptiveFilterSaIS4_EJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9fb 	bl	8002fda <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f9fe 	bl	8003008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11RelayOutputSaIS4_EJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa4a 	bl	80030ac <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d104      	bne.n	8002c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7fe fcac 	bl	8001594 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8002c3c:	e004      	b.n	8002c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x26>
	  traits_type::move(__d, __s, __n);
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7fe fccb 	bl	80015de <_ZNSt11char_traitsIcE4moveEPcPKcj>
      }
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002c5a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f9ee 	bl	8002040 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002c64:	462a      	mov	r2, r5
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 fa38 	bl	80030de <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002c6e:	4603      	mov	r3, r0
    }
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdb0      	pop	{r4, r5, r7, pc}

08002c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	f000 fa1a 	bl	80030c0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002ca4:	4817      	ldr	r0, [pc, #92]	; (8002d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8002ca6:	f004 fec1 	bl	8007a2c <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	f7ff ffcf 	bl	8002c50 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d910      	bls.n	8002cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff fcb5 	bl	8002634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fa5b 	bl	800218a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff fa63 	bl	80021a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7ff f9d2 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fa05 	bl	80030fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fa6f 	bl	80021d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	0800801c 	.word	0x0800801c

08002d08 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dd0d      	ble.n	8002d3e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_+0x36>
	    *--__result = *--__last;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e7ee      	b.n	8002d1c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 8002d3e:	687b      	ldr	r3, [r7, #4]
	}
 8002d40:	4618      	mov	r0, r3
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	425b      	negs	r3, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 ffe3 	bl	8007d3c <memmove>
	  return __result - _Num;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	425b      	negs	r3, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002d86:	b480      	push	{r7}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	dd0d      	ble.n	8002dbc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x36>
	      *__result = *__first;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e7ee      	b.n	8002d9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 8002dbc:	687b      	ldr	r3, [r7, #4]
	}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 ffa7 	bl	8007d3c <memmove>
	  return __result + _Num;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
	}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
      }
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f99f 	bl	8003172 <_ZSt11__addressofIKcEPT_RS1_>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f99c 	bl	8003186 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7DS18B20SaIS4_EJP5TIMEREEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	f107 0318 	add.w	r3, r7, #24
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ffe5 	bl	8002e3e <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	f107 0218 	add.w	r2, r7, #24
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f995 	bl	80031ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f9b8 	bl	80031fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f9be 	bl	800321a <_ZNSaI7DS18B20EC1ERKS0_>
 8002e9e:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f7ff f9fc 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 8002ea8:	4606      	mov	r6, r0
	  auto __pi = ::new (__mem)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4619      	mov	r1, r3
 8002eae:	2010      	movs	r0, #16
 8002eb0:	f7fe fb5b 	bl	800156a <_ZnwjPv>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	4632      	mov	r2, r6
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f9d4 	bl	8003268 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJP5TIMEREEES1_DpOT_>
 8002ec0:	623c      	str	r4, [r7, #32]
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f9e0 	bl	800228c <_ZNSaI7DS18B20ED1Ev>
	  __guard = nullptr;
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f9fe 	bl	80032d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8002ede:	6a38      	ldr	r0, [r7, #32]
 8002ee0:	f000 fa06 	bl	80032f0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	601a      	str	r2, [r3, #0]
	  auto __guard = std::__allocate_guarded(__a2);
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f970 	bl	80031d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8002ef4:	f107 0318 	add.w	r3, r7, #24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f94e 	bl	800319a <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4618      	mov	r0, r3
 8002f02:	372c      	adds	r7, #44	; 0x2c
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f08 <_ZNSt12__shared_ptrI7DS18B20LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	{ }
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9f0 	bl	800330c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I14AdaptiveFilterSaIS4_EJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8002f36:	b5b0      	push	{r4, r5, r7, lr}
 8002f38:	b08a      	sub	sp, #40	; 0x28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	f107 0318 	add.w	r3, r7, #24
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ffe6 	bl	8002f1c <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	f107 0218 	add.w	r2, r7, #24
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f9ea 	bl	8003334 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8002f60:	f107 0310 	add.w	r3, r7, #16
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fa0d 	bl	8003384 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fa13 	bl	80033a0 <_ZNSaI14AdaptiveFilterEC1ERKS0_>
 8002f7a:	f107 051c 	add.w	r5, r7, #28
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	2018      	movs	r0, #24
 8002f84:	f7fe faf1 	bl	800156a <_ZnwjPv>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 fa2d 	bl	80033ec <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 8002f92:	623c      	str	r4, [r7, #32]
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fa07 	bl	80023ac <_ZNSaI14AdaptiveFilterED1Ev>
	  __guard = nullptr;
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fa51 	bl	800344c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8002fb0:	6a38      	ldr	r0, [r7, #32]
 8002fb2:	f000 fa59 	bl	8003468 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	601a      	str	r2, [r3, #0]
	  auto __guard = std::__allocate_guarded(__a2);
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f9ca 	bl	800335a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8002fc6:	f107 0318 	add.w	r3, r7, #24
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f9a8 	bl	8003320 <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}

08002fda <_ZNSt12__shared_ptrI14AdaptiveFilterLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
	{ }
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fa43 	bl	8003484 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11RelayOutputSaIS4_EJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f107 0318 	add.w	r3, r7, #24
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ffe6 	bl	8002fee <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	f107 0218 	add.w	r2, r7, #24
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa3d 	bl	80034ac <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fa60 	bl	80034fc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fa66 	bl	8003518 <_ZNSaI11RelayOutputEC1ERKS0_>
 800304c:	f107 051c 	add.w	r5, r7, #28
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	4619      	mov	r1, r3
 8003054:	2018      	movs	r0, #24
 8003056:	f7fe fa88 	bl	800156a <_ZnwjPv>
 800305a:	4604      	mov	r4, r0
 800305c:	4629      	mov	r1, r5
 800305e:	4620      	mov	r0, r4
 8003060:	f000 fa80 	bl	8003564 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 8003064:	623c      	str	r4, [r7, #32]
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f9c2 	bl	80023f4 <_ZNSaI11RelayOutputED1Ev>
	  __guard = nullptr;
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faa4 	bl	80035c4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8003082:	6a38      	ldr	r0, [r7, #32]
 8003084:	f000 faac 	bl	80035e0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	601a      	str	r2, [r3, #0]
	  auto __guard = std::__allocate_guarded(__a2);
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa1d 	bl	80034d2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8003098:	f107 0318 	add.w	r3, r7, #24
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f9fb 	bl	8003498 <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}

080030ac <_ZNSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	{ }
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
    }
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	461a      	mov	r2, r3
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fc31 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__n > this->_M_max_size())
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa66 	bl	80035fc <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4293      	cmp	r3, r2
 8003136:	bf8c      	ite	hi
 8003138:	2301      	movhi	r3, #1
 800313a:	2300      	movls	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003142:	f004 fc70 	bl	8007a26 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003146:	68b8      	ldr	r0, [r7, #8]
 8003148:	f004 fba2 	bl	8007890 <_Znwj>
 800314c:	4603      	mov	r3, r0
 800314e:	bf00      	nop
      }
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68b8      	ldr	r0, [r7, #8]
 8003168:	f004 fb90 	bl	800788c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80031b8:	2101      	movs	r1, #1
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f000 fa29 	bl	8003612 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa43 	bl	8003652 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4619      	mov	r1, r3
 80031f0:	f000 fa43 	bl	800367a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa54 	bl	80036b8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8003210:	4603      	mov	r3, r0
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_ZNSaI7DS18B20EC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa50 	bl	80036cc <_ZN9__gnu_cxx13new_allocatorI7DS18B20EC1ERKS2_>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff f824 	bl	800228c <_ZNSaI7DS18B20ED1Ev>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffed 	bl	8003236 <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EED1Ev>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJP5TIMEREEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
	: _M_impl(__a)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa34 	bl	80036e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJP5TIMEREEES1_DpOT_+0x68>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f103 040c 	add.w	r4, r3, #12
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ffc3 	bl	800321a <_ZNSaI7DS18B20EC1ERKS0_>
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4620      	mov	r0, r4
 800329c:	f000 fa38 	bl	8003710 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fff1 	bl	800228c <_ZNSaI7DS18B20ED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f820 	bl	80032f0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80032b0:	4604      	mov	r4, r0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe fff4 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4621      	mov	r1, r4
 80032be:	68b8      	ldr	r0, [r7, #8]
 80032c0:	f000 fa4d 	bl	800375e <_ZNSt16allocator_traitsISaI7DS18B20EE9constructIS0_JP5TIMEREEEvRS1_PT_DpOT0_>
	}
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	08008160 	.word	0x08008160

080032d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	605a      	str	r2, [r3, #4]
	return *this;
 80032e4:	687b      	ldr	r3, [r7, #4]
      }
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	330c      	adds	r3, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fa40 	bl	8003782 <_ZN9__gnu_cxx16__aligned_bufferI7DS18B20E6_M_ptrEv>
 8003302:	4603      	mov	r3, r0
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800333e:	2101      	movs	r1, #1
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f000 fa2a 	bl	800379a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	6839      	ldr	r1, [r7, #0]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa47 	bl	80037e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	4619      	mov	r1, r3
 8003376:	f000 fa47 	bl	8003808 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fa58 	bl	8003846 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8003396:	4603      	mov	r3, r0
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZNSaI14AdaptiveFilterEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fa54 	bl	800385a <_ZN9__gnu_cxx13new_allocatorI14AdaptiveFilterEC1ERKS2_>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe fff1 	bl	80023ac <_ZNSaI14AdaptiveFilterED1Ev>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffed 	bl	80033bc <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EED1Ev>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
	: _M_impl(__a)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f973 	bl	80036e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x5c>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 040c 	add.w	r4, r3, #12
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffc5 	bl	80033a0 <_ZNSaI14AdaptiveFilterEC1ERKS0_>
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	4619      	mov	r1, r3
 800341c:	4620      	mov	r0, r4
 800341e:	f000 fa27 	bl	8003870 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8003422:	f107 030c 	add.w	r3, r7, #12
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe ffc0 	bl	80023ac <_ZNSaI14AdaptiveFilterED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f81b 	bl	8003468 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003432:	4603      	mov	r3, r0
 8003434:	4619      	mov	r1, r3
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	f000 fa3a 	bl	80038b0 <_ZNSt16allocator_traitsISaI14AdaptiveFilterEE9constructIS0_JEEEvRS1_PT_DpOT0_>
	}
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop
 8003448:	08008144 	.word	0x08008144

0800344c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
	return *this;
 800345c:	687b      	ldr	r3, [r7, #4]
      }
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	330c      	adds	r3, #12
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fa27 	bl	80038c8 <_ZN9__gnu_cxx16__aligned_bufferI14AdaptiveFilterE6_M_ptrEv>
 800347a:	4603      	mov	r3, r0
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80034b6:	2101      	movs	r1, #1
 80034b8:	6838      	ldr	r0, [r7, #0]
 80034ba:	f000 fa11 	bl	80038e0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa2e 	bl	8003926 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4619      	mov	r1, r3
 80034ee:	f000 fa2e 	bl	800394e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fa3f 	bl	800398c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800350e:	4603      	mov	r3, r0
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZNSaI11RelayOutputEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa3b 	bl	80039a0 <_ZN9__gnu_cxx13new_allocatorI11RelayOutputEC1ERKS2_>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fe ff59 	bl	80023f4 <_ZNSaI11RelayOutputED1Ev>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffed 	bl	8003534 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EED1Ev>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	: _M_impl(__a)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f8b7 	bl	80036e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x5c>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f103 040c 	add.w	r4, r3, #12
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ffc5 	bl	8003518 <_ZNSaI11RelayOutputEC1ERKS0_>
 800358e:	f107 030c 	add.w	r3, r7, #12
 8003592:	4619      	mov	r1, r3
 8003594:	4620      	mov	r0, r4
 8003596:	f000 fa0e 	bl	80039b6 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe ff28 	bl	80023f4 <_ZNSaI11RelayOutputED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f81b 	bl	80035e0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4619      	mov	r1, r3
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	f000 fa21 	bl	80039f6 <_ZNSt16allocator_traitsISaI11RelayOutputEE9constructIS0_JEEEvRS1_PT_DpOT0_>
	}
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	08008128 	.word	0x08008128

080035c4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
	return *this;
 80035d4:	687b      	ldr	r3, [r7, #4]
      }
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	330c      	adds	r3, #12
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fa0e 	bl	8003a0e <_ZN9__gnu_cxx16__aligned_bufferI11RelayOutputE6_M_ptrEv>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003604:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003624:	f7fd ff9a 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4618      	mov	r0, r3
 8003634:	f004 f92c 	bl	8007890 <_Znwj>
 8003638:	4603      	mov	r3, r0
 800363a:	e006      	b.n	800364a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa56 	bl	8003af2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 8003646:	4603      	mov	r3, r0
 8003648:	bf00      	nop
      { return __a.allocate(__n); }
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f000 f9e1 	bl	8003a26 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]
      { }
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800367a:	b580      	push	{r7, lr}
 800367c:	b088      	sub	sp, #32
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003692:	f7fd ff63 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800369c:	69b8      	ldr	r0, [r7, #24]
 800369e:	f004 f8f3 	bl	8007888 <_ZdlPv>
	    return;
 80036a2:	e005      	b.n	80036b0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	69b9      	ldr	r1, [r7, #24]
 80036a8:	69f8      	ldr	r0, [r7, #28]
 80036aa:	f000 fa41 	bl	8003b30 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 80036c0:	687b      	ldr	r3, [r7, #4]
    }
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <_ZN9__gnu_cxx13new_allocatorI7DS18B20EC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	0800817c 	.word	0x0800817c

08003710 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f98c 	bl	8003a3a <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EEC1ERKS1_>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZSt12construct_atI7DS18B20JP5TIMEREEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003736:	6838      	ldr	r0, [r7, #0]
 8003738:	f7fe fdb2 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 800373c:	4603      	mov	r3, r0
 800373e:	681c      	ldr	r4, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4619      	mov	r1, r3
 8003744:	2004      	movs	r0, #4
 8003746:	f7fd ff10 	bl	800156a <_ZnwjPv>
 800374a:	4605      	mov	r5, r0
 800374c:	4621      	mov	r1, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f000 fca9 	bl	80040a6 <_ZN7DS18B20C1EP5TIMER>
 8003754:	462b      	mov	r3, r5
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bdb0      	pop	{r4, r5, r7, pc}

0800375e <_ZNSt16allocator_traitsISaI7DS18B20EE9constructIS0_JP5TIMEREEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fd98 	bl	80022a0 <_ZSt7forwardIP5TIMEREOT_RNSt16remove_referenceIS2_E4typeE>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f7ff ffd9 	bl	800372c <_ZSt12construct_atI7DS18B20JP5TIMEREEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <_ZN9__gnu_cxx16__aligned_bufferI7DS18B20E6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f963 	bl	8003a56 <_ZN9__gnu_cxx16__aligned_bufferI7DS18B20E7_M_addrEv>
 8003790:	4603      	mov	r3, r0
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80037ac:	f7fd fed6 	bl	800155c <_ZSt21is_constant_evaluatedv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 f865 	bl	8007890 <_Znwj>
 80037c6:	4603      	mov	r3, r0
 80037c8:	e006      	b.n	80037d8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9bd 	bl	8003b4e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	bf00      	nop
      { return __a.allocate(__n); }
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80037ec:	68b8      	ldr	r0, [r7, #8]
 80037ee:	f000 f93c 	bl	8003a6a <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	605a      	str	r2, [r3, #4]
      { }
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003820:	f7fd fe9c 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800382a:	69b8      	ldr	r0, [r7, #24]
 800382c:	f004 f82c 	bl	8007888 <_ZdlPv>
	    return;
 8003830:	e005      	b.n	800383e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	69b9      	ldr	r1, [r7, #24]
 8003836:	69f8      	ldr	r0, [r7, #28]
 8003838:	f000 f9ab 	bl	8003b92 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
      return __ptr;
 800384e:	687b      	ldr	r3, [r7, #4]
    }
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <_ZN9__gnu_cxx13new_allocatorI14AdaptiveFilterEC1ERKS2_>:
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8fe 	bl	8003a7e <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EEC1ERKS1_>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZSt12construct_atI14AdaptiveFilterJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	200c      	movs	r0, #12
 800389a:	f7fd fe66 	bl	800156a <_ZnwjPv>
 800389e:	4604      	mov	r4, r0
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7fd fe23 	bl	80014ec <_ZN14AdaptiveFilterC1Ev>
 80038a6:	4623      	mov	r3, r4
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <_ZNSt16allocator_traitsISaI14AdaptiveFilterEE9constructIS0_JEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f7ff ffe6 	bl	800388c <_ZSt12construct_atI14AdaptiveFilterJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZN9__gnu_cxx16__aligned_bufferI14AdaptiveFilterE6_M_ptrEv>:
      _M_ptr() noexcept
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8e2 	bl	8003a9a <_ZN9__gnu_cxx16__aligned_bufferI14AdaptiveFilterE7_M_addrEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80038f2:	f7fd fe33 	bl	800155c <_ZSt21is_constant_evaluatedv>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4618      	mov	r0, r3
 8003908:	f003 ffc2 	bl	8007890 <_Znwj>
 800390c:	4603      	mov	r3, r0
 800390e:	e006      	b.n	800391e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f94e 	bl	8003bb6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800391a:	4603      	mov	r3, r0
 800391c:	bf00      	nop
      { return __a.allocate(__n); }
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f000 f8bb 	bl	8003aae <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	605a      	str	r2, [r3, #4]
      { }
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003966:	f7fd fdf9 	bl	800155c <_ZSt21is_constant_evaluatedv>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8003970:	69b8      	ldr	r0, [r7, #24]
 8003972:	f003 ff89 	bl	8007888 <_ZdlPv>
	    return;
 8003976:	e005      	b.n	8003984 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	69f8      	ldr	r0, [r7, #28]
 800397e:	f000 f93c 	bl	8003bfa <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
      return __ptr;
 8003994:	687b      	ldr	r3, [r7, #4]
    }
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <_ZN9__gnu_cxx13new_allocatorI11RelayOutputEC1ERKS2_>:
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f87d 	bl	8003ac2 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EEC1ERKS1_>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZSt12construct_atI11RelayOutputJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80039d2:	b590      	push	{r4, r7, lr}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4619      	mov	r1, r3
 80039de:	200c      	movs	r0, #12
 80039e0:	f7fd fdc3 	bl	800156a <_ZnwjPv>
 80039e4:	4604      	mov	r4, r0
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 feb0 	bl	800474c <_ZN11RelayOutputC1Ev>
 80039ec:	4623      	mov	r3, r4
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}

080039f6 <_ZNSt16allocator_traitsISaI11RelayOutputEE9constructIS0_JEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f7ff ffe6 	bl	80039d2 <_ZSt12construct_atI11RelayOutputJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZN9__gnu_cxx16__aligned_bufferI11RelayOutputE6_M_ptrEv>:
      _M_ptr() noexcept
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f861 	bl	8003ade <_ZN9__gnu_cxx16__aligned_bufferI11RelayOutputE7_M_addrEv>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EEC1ERKS1_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fbe7 	bl	800321a <_ZNSaI7DS18B20EC1ERKS0_>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_ZN9__gnu_cxx16__aligned_bufferI7DS18B20E7_M_addrEv>:
      _M_addr() noexcept
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003a5e:	687b      	ldr	r3, [r7, #4]
      }
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EEC1ERKS1_>:
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fc88 	bl	80033a0 <_ZNSaI14AdaptiveFilterEC1ERKS0_>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <_ZN9__gnu_cxx16__aligned_bufferI14AdaptiveFilterE7_M_addrEv>:
      _M_addr() noexcept
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003aa2:	687b      	ldr	r3, [r7, #4]
      }
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EEC1ERKS1_>:
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fd22 	bl	8003518 <_ZNSaI11RelayOutputEC1ERKS0_>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZN9__gnu_cxx16__aligned_bufferI11RelayOutputE7_M_addrEv>:
      _M_addr() noexcept
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003ae6:	687b      	ldr	r3, [r7, #4]
      }
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f88d 	bl	8003c1e <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf8c      	ite	hi
 8003b0c:	2301      	movhi	r3, #1
 8003b0e:	2300      	movls	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b16:	f003 ff86 	bl	8007a26 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 feb6 	bl	8007890 <_Znwj>
 8003b24:	4603      	mov	r3, r0
 8003b26:	bf00      	nop
      }
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	68b8      	ldr	r0, [r7, #8]
 8003b44:	f003 fea2 	bl	800788c <_ZdlPvj>
      }
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f86a 	bl	8003c34 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bf8c      	ite	hi
 8003b68:	2301      	movhi	r3, #1
 8003b6a:	2300      	movls	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b72:	f003 ff58 	bl	8007a26 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fe85 	bl	8007890 <_Znwj>
 8003b86:	4603      	mov	r3, r0
 8003b88:	bf00      	nop
      }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f003 fe6e 	bl	800788c <_ZdlPvj>
      }
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f842 	bl	8003c4c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bf8c      	ite	hi
 8003bd0:	2301      	movhi	r3, #1
 8003bd2:	2300      	movls	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003bda:	f003 ff24 	bl	8007a26 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fe51 	bl	8007890 <_Znwj>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	bf00      	nop
      }
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4619      	mov	r1, r3
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f003 fe3a 	bl	800788c <_ZdlPvj>
      }
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c26:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x14>)
      }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	05555555 	.word	0x05555555

08003c4c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x14>)
      }
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	05555555 	.word	0x05555555

08003c64 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	330c      	adds	r3, #12
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fc68 	bl	800354c <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fad8 	bl	8002234 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08008128 	.word	0x08008128

08003c94 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe1 	bl	8003c64 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003ca2:	2118      	movs	r1, #24
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f003 fdf1 	bl	800788c <_ZdlPvj>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f967 	bl	8003f94 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fc89 	bl	80035e0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 f96a 	bl	8003fac <_ZNSt16allocator_traitsISaI11RelayOutputEE7destroyIS0_EEvRS1_PT_>
      }
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}

08003ce0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	330c      	adds	r3, #12
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f951 	bl	8003f94 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f977 	bl	8002fee <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003d00:	f107 0114 	add.w	r1, r7, #20
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fe0b 	bl	8003926 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ffa7 	bl	8003c64 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fbd9 	bl	80034d2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fbb7 	bl	8003498 <_ZNSaISt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fc4f 	bl	80035e0 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003d42:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003d44:	f7fd fcf6 	bl	8001734 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8003d48:	4602      	mov	r2, r0
	    ||
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d005      	beq.n	8003d5c <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8003d50:	6838      	ldr	r0, [r7, #0]
 8003d52:	f003 fe75 	bl	8007a40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8003d56:	4603      	mov	r3, r0
	    ||
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8003d60:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e000      	b.n	8003d6c <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8003d6a:	2300      	movs	r3, #0
      }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	330c      	adds	r3, #12
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fb24 	bl	80033d4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fa50 	bl	8002234 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	08008144 	.word	0x08008144

08003da4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ffe1 	bl	8003d74 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003db2:	2118      	movs	r1, #24
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f003 fd69 	bl	800788c <_ZdlPvj>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f8f7 	bl	8003fc4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fb45 	bl	8003468 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4619      	mov	r1, r3
 8003de2:	4620      	mov	r0, r4
 8003de4:	f000 f8fa 	bl	8003fdc <_ZNSt16allocator_traitsISaI14AdaptiveFilterEE7destroyIS0_EEvRS1_PT_>
      }
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd90      	pop	{r4, r7, pc}

08003df0 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f8e1 	bl	8003fc4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003e02:	4602      	mov	r2, r0
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f886 	bl	8002f1c <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003e10:	f107 0114 	add.w	r1, r7, #20
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fce0 	bl	80037e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffa7 	bl	8003d74 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fa95 	bl	800335a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fa73 	bl	8003320 <_ZNSaISt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fb0b 	bl	8003468 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003e52:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003e54:	f7fd fc6e 	bl	8001734 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8003e58:	4602      	mov	r2, r0
	    ||
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d005      	beq.n	8003e6c <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	f003 fded 	bl	8007a40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8003e66:	4603      	mov	r3, r0
	    ||
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8003e70:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e000      	b.n	8003e7c <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8003e7a:	2300      	movs	r3, #0
      }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	330c      	adds	r3, #12
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f9d9 	bl	800324e <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe f9c8 	bl	8002234 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	08008160 	.word	0x08008160

08003eb4 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ffe1 	bl	8003e84 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003ec2:	2110      	movs	r1, #16
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f003 fce1 	bl	800788c <_ZdlPvj>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f887 	bl	8003ff4 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fa01 	bl	80032f0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 f88a 	bl	800400c <_ZNSt16allocator_traitsISaI7DS18B20EE7destroyIS0_EEvRS1_PT_>
      }
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}

08003f00 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f871 	bl	8003ff4 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8003f12:	4602      	mov	r2, r0
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe ff8f 	bl	8002e3e <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003f20:	f107 0114 	add.w	r1, r7, #20
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fb91 	bl	8003652 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ffa7 	bl	8003e84 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f94a 	bl	80031d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f928 	bl	800319a <_ZNSaISt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff f9c7 	bl	80032f0 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003f62:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003f64:	f7fd fbe6 	bl	8001734 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8003f68:	4602      	mov	r2, r0
	    ||
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d005      	beq.n	8003f7c <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f003 fd65 	bl	8007a40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8003f76:	4603      	mov	r3, r0
	    ||
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8003f80:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	e000      	b.n	8003f8c <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8003f8a:	2300      	movs	r3, #0
      }
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZNSt23_Sp_counted_ptr_inplaceI11RelayOutputSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f841 	bl	8004024 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EE6_S_getERS2_>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZNSt16allocator_traitsISaI11RelayOutputEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8003fb6:	6838      	ldr	r0, [r7, #0]
 8003fb8:	f000 f83e 	bl	8004038 <_ZSt10destroy_atI11RelayOutputEvPT_>
	}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_ZNSt23_Sp_counted_ptr_inplaceI14AdaptiveFilterSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f840 	bl	8004052 <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EE6_S_getERS2_>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt16allocator_traitsISaI14AdaptiveFilterEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f000 f83d 	bl	8004066 <_ZSt10destroy_atI14AdaptiveFilterEvPT_>
	}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_ZNSt23_Sp_counted_ptr_inplaceI7DS18B20SaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f83f 	bl	8004080 <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EE6_S_getERS2_>
 8004002:	4603      	mov	r3, r0
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZNSt16allocator_traitsISaI7DS18B20EE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f000 f83c 	bl	8004094 <_ZSt10destroy_atI7DS18B20EvPT_>
	}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <_ZNSt14_Sp_ebo_helperILi0ESaI11RelayOutputELb1EE6_S_getERS2_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <_ZSt10destroy_atI11RelayOutputEvPT_>:
    destroy_at(_Tp* __location)
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
    }
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZNSt14_Sp_ebo_helperILi0ESaI14AdaptiveFilterELb1EE6_S_getERS2_>:
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <_ZSt10destroy_atI14AdaptiveFilterEvPT_>:
    destroy_at(_Tp* __location)
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
    }
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <_ZNSt14_Sp_ebo_helperILi0ESaI7DS18B20ELb1EE6_S_getERS2_>:
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <_ZSt10destroy_atI7DS18B20EvPT_>:
    destroy_at(_Tp* __location)
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    }
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <_ZN7DS18B20C1EP5TIMER>:
#include "DS18B20.hpp"

DS18B20::DS18B20(TIMER *tim) {
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
	_tim = tim;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
	...

080040c4 <_ZN7DS18B2010setDataPinEb>:

void DS18B20::setDataPin(bool on)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
	if (on) {
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <_ZN7DS18B2010setDataPinEb+0x20>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80040d6:	2201      	movs	r2, #1
 80040d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <_ZN7DS18B2010setDataPinEb+0x34>)
 80040de:	f002 fb84 	bl	80067ea <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 80040e2:	e005      	b.n	80040f0 <_ZN7DS18B2010setDataPinEb+0x2c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ea:	4803      	ldr	r0, [pc, #12]	; (80040f8 <_ZN7DS18B2010setDataPinEb+0x34>)
 80040ec:	f002 fb7d 	bl	80067ea <HAL_GPIO_WritePin>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40010c00 	.word	0x40010c00

080040fc <_ZN7DS18B2012setPinOUTPUTEv>:

void DS18B20::toggleDataPin() {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
}

void DS18B20::setPinOUTPUT() {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004116:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004118:	2301      	movs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800411c:	2303      	movs	r3, #3
 800411e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4619      	mov	r1, r3
 8004126:	4803      	ldr	r0, [pc, #12]	; (8004134 <_ZN7DS18B2012setPinOUTPUTEv+0x38>)
 8004128:	f002 f9c4 	bl	80064b4 <HAL_GPIO_Init>
}
 800412c:	bf00      	nop
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40010c00 	.word	0x40010c00

08004138 <_ZN7DS18B2011setPinINPUTEv>:

void DS18B20::setPinINPUT() {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800414e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004152:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004158:	2303      	movs	r3, #3
 800415a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800415c:	2301      	movs	r3, #1
 800415e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4619      	mov	r1, r3
 8004166:	4803      	ldr	r0, [pc, #12]	; (8004174 <_ZN7DS18B2011setPinINPUTEv+0x3c>)
 8004168:	f002 f9a4 	bl	80064b4 <HAL_GPIO_Init>
}
 800416c:	bf00      	nop
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40010c00 	.word	0x40010c00

08004178 <_ZN7DS18B2011startSensorEv>:

void DS18B20::startSensor() {
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	setPinOUTPUT();
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ffbb 	bl	80040fc <_ZN7DS18B2012setPinOUTPUTEv>
	setDataPin(false);
 8004186:	2100      	movs	r1, #0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff9b 	bl	80040c4 <_ZN7DS18B2010setDataPinEb>
	_tim->delayUS(480);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004196:	4618      	mov	r0, r3
 8004198:	f001 ffda 	bl	8006150 <_ZN5TIMER7delayUSEt>
	setPinINPUT();
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffcb 	bl	8004138 <_ZN7DS18B2011setPinINPUTEv>
	_tim->delayUS(80);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2150      	movs	r1, #80	; 0x50
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 ffd1 	bl	8006150 <_ZN5TIMER7delayUSEt>
	HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80041ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041b2:	4807      	ldr	r0, [pc, #28]	; (80041d0 <_ZN7DS18B2011startSensorEv+0x58>)
 80041b4:	f002 fb02 	bl	80067bc <HAL_GPIO_ReadPin>
	_tim->delayUS(400);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 ffc5 	bl	8006150 <_ZN5TIMER7delayUSEt>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40010c00 	.word	0x40010c00

080041d4 <_ZN7DS18B209writeDataEh>:

void DS18B20::writeData(uint8_t data) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
	setPinOUTPUT(); // set as output
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff8b 	bl	80040fc <_ZN7DS18B2012setPinOUTPUTEv>

	for (uint8_t i = 0; i < 8; i++) {
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b07      	cmp	r3, #7
 80041ee:	d832      	bhi.n	8004256 <_ZN7DS18B209writeDataEh+0x82>
		if (data & (1 << i)) {  // if the bit is high
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	fa42 f303 	asr.w	r3, r2, r3
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d016      	beq.n	800422e <_ZN7DS18B209writeDataEh+0x5a>
			// write 1
			setPinOUTPUT();	    // set as output
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff7b 	bl	80040fc <_ZN7DS18B2012setPinOUTPUTEv>
			setDataPin(false);  // pull the pin LOW
 8004206:	2100      	movs	r1, #0
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff5b 	bl	80040c4 <_ZN7DS18B2010setDataPinEb>
			_tim->delayUS(1);   // wait for 1 us
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f001 ff9b 	bl	8006150 <_ZN5TIMER7delayUSEt>
			setPinINPUT();	    // set as input
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff8c 	bl	8004138 <_ZN7DS18B2011setPinINPUTEv>
			_tim->delayUS(60);  // wait for 60 us
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	213c      	movs	r1, #60	; 0x3c
 8004226:	4618      	mov	r0, r3
 8004228:	f001 ff92 	bl	8006150 <_ZN5TIMER7delayUSEt>
 800422c:	e00f      	b.n	800424e <_ZN7DS18B209writeDataEh+0x7a>
		} else {                // if the bit is low
			// write 0
			setPinOUTPUT();
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ff64 	bl	80040fc <_ZN7DS18B2012setPinOUTPUTEv>
			setDataPin(false);  // pull the pin LOW
 8004234:	2100      	movs	r1, #0
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff44 	bl	80040c4 <_ZN7DS18B2010setDataPinEb>
			_tim->delayUS(60);  // wait for 60 us
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	213c      	movs	r1, #60	; 0x3c
 8004242:	4618      	mov	r0, r3
 8004244:	f001 ff84 	bl	8006150 <_ZN5TIMER7delayUSEt>
			setPinINPUT();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff75 	bl	8004138 <_ZN7DS18B2011setPinINPUTEv>
	for (uint8_t i = 0; i < 8; i++) {
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	3301      	adds	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e7c9      	b.n	80041ea <_ZN7DS18B209writeDataEh+0x16>
		}
	}
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <_ZN7DS18B208readDataEv>:

uint8_t DS18B20::readData() {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
	setPinINPUT();
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff63 	bl	8004138 <_ZN7DS18B2011setPinINPUTEv>
	for (uint8_t i = 0; i < 8; i++) {
 8004272:	2300      	movs	r3, #0
 8004274:	73bb      	strb	r3, [r7, #14]
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	2b07      	cmp	r3, #7
 800427a:	d830      	bhi.n	80042de <_ZN7DS18B208readDataEv+0x7e>
		setPinOUTPUT();                              // set as output
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff3d 	bl	80040fc <_ZN7DS18B2012setPinOUTPUTEv>
		setDataPin(false);                           // pull the data pin LOW
 8004282:	2100      	movs	r1, #0
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff1d 	bl	80040c4 <_ZN7DS18B2010setDataPinEb>
		_tim->delayUS(2);                            // wait for 2 us
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f001 ff5d 	bl	8006150 <_ZN5TIMER7delayUSEt>
		setPinINPUT();							     // set as input
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff4e 	bl	8004138 <_ZN7DS18B2011setPinINPUTEv>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {  // if the pin is HIGH
 800429c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042a0:	4811      	ldr	r0, [pc, #68]	; (80042e8 <_ZN7DS18B208readDataEv+0x88>)
 80042a2:	f002 fa8b 	bl	80067bc <HAL_GPIO_ReadPin>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <_ZN7DS18B208readDataEv+0x6a>
			value |= 1 << i;                         // read = 1
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	2201      	movs	r2, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	73fb      	strb	r3, [r7, #15]
		}
		_tim->delayUS(60);                           // wait for 60 us
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	213c      	movs	r1, #60	; 0x3c
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 ff3d 	bl	8006150 <_ZN5TIMER7delayUSEt>
	for (uint8_t i = 0; i < 8; i++) {
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	3301      	adds	r3, #1
 80042da:	73bb      	strb	r3, [r7, #14]
 80042dc:	e7cb      	b.n	8004276 <_ZN7DS18B208readDataEv+0x16>
	}
	return value;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40010c00 	.word	0x40010c00

080042ec <_ZN7DS18B2015readTemperatureEv>:

float DS18B20::readTemperature() {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	startSensor();
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff3f 	bl	8004178 <_ZN7DS18B2011startSensorEv>
	HAL_Delay(1);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f001 ffa8 	bl	8006250 <HAL_Delay>
	writeData(0xCC);
 8004300:	21cc      	movs	r1, #204	; 0xcc
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff66 	bl	80041d4 <_ZN7DS18B209writeDataEh>
	writeData(0x44);
 8004308:	2144      	movs	r1, #68	; 0x44
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff62 	bl	80041d4 <_ZN7DS18B209writeDataEh>
	HAL_Delay(800);
 8004310:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004314:	f001 ff9c 	bl	8006250 <HAL_Delay>
	startSensor();
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff2d 	bl	8004178 <_ZN7DS18B2011startSensorEv>
	writeData(0xCC);
 800431e:	21cc      	movs	r1, #204	; 0xcc
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff57 	bl	80041d4 <_ZN7DS18B209writeDataEh>
	writeData(0xBE);
 8004326:	21be      	movs	r1, #190	; 0xbe
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff53 	bl	80041d4 <_ZN7DS18B209writeDataEh>
	uint8_t temp1 = readData();
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ff96 	bl	8004260 <_ZN7DS18B208readDataEv>
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = readData();
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff91 	bl	8004260 <_ZN7DS18B208readDataEv>
 800433e:	4603      	mov	r3, r0
 8004340:	73bb      	strb	r3, [r7, #14]
	uint16_t tempCom = (temp2 << 8) | temp1;
 8004342:	7bbb      	ldrb	r3, [r7, #14]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	b21a      	sxth	r2, r3
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	b21b      	sxth	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b21b      	sxth	r3, r3
 8004350:	81bb      	strh	r3, [r7, #12]
	return (float)(tempCom / 16.0);
 8004352:	89bb      	ldrh	r3, [r7, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f85d 	bl	8000414 <__aeabi_i2d>
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <_ZN7DS18B2015readTemperatureEv+0x90>)
 8004360:	f7fc f9ec 	bl	800073c <__aeabi_ddiv>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc face 	bl	800090c <__aeabi_d2f>
 8004370:	4603      	mov	r3, r0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40300000 	.word	0x40300000

08004380 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f805 	bl	8004398 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800438e:	4603      	mov	r3, r0
      }
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f805 	bl	80043b0 <_ZNKSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_ZNKSt12__shared_ptrI11RelayOutputLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
	...

080043c8 <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE>:
 *      Author: abramov.a
 */

#include <PIDRegulator.hpp>

PID_Regulator::PID_Regulator(unsigned char target_temp,
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	72fb      	strb	r3, [r7, #11]
 80043d6:	4613      	mov	r3, r2
 80043d8:	72bb      	strb	r3, [r7, #10]
    std::shared_ptr<RelayOutput>relay)
    : target_temp_(target_temp),
    period_(period),
    filter_(filter),
    ds18b20_(ds18b20),
    relay_(relay) {
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE+0xb0>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	7afa      	ldrb	r2, [r7, #11]
 80043e4:	711a      	strb	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3308      	adds	r3, #8
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd fa12 	bl	8001816 <_ZNSt10shared_ptrI14AdaptiveFilterEC1ERKS1_>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3310      	adds	r3, #16
 80043f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fa32 	bl	8001862 <_ZNSt10shared_ptrI7DS18B20EC1ERKS1_>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3318      	adds	r3, #24
 8004402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd fa52 	bl	80018ae <_ZNSt10shared_ptrI11RelayOutputEC1ERKS1_>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	621a      	str	r2, [r3, #32]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	220a      	movs	r2, #10
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE+0xb4>)
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE+0xb8>)
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a16      	ldr	r2, [pc, #88]	; (8004484 <_ZN13PID_RegulatorC1EhhSt10shared_ptrI14AdaptiveFilterES0_I7DS18B20ES0_I11RelayOutputE+0xbc>)
 800442c:	635a      	str	r2, [r3, #52]	; 0x34
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	7aba      	ldrb	r2, [r7, #10]
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	int dt_ = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
	int min_out_ = 1; // 1 sec
 800444a:	2301      	movs	r3, #1
 800444c:	623b      	str	r3, [r7, #32]
	int max_out_ = 10; // 10 sec
 800444e:	230a      	movs	r3, #10
 8004450:	61fb      	str	r3, [r7, #28]
	float kp_ = 1;
 8004452:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004456:	61bb      	str	r3, [r7, #24]
	float ki_ = 1;
 8004458:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800445c:	617b      	str	r3, [r7, #20]
	float kd_ = 1;
 800445e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004462:	613b      	str	r3, [r7, #16]
	cycle_ = kOff;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4618      	mov	r0, r3
 8004470:	3728      	adds	r7, #40	; 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	08008198 	.word	0x08008198
 800447c:	3fe66666 	.word	0x3fe66666
 8004480:	40666666 	.word	0x40666666
 8004484:	3e666666 	.word	0x3e666666

08004488 <_ZN13PID_RegulatorD1Ev>:

PID_Regulator::~PID_Regulator() {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <_ZN13PID_RegulatorD1Ev+0x38>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3318      	adds	r3, #24
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd f998 	bl	80017d0 <_ZNSt10shared_ptrI11RelayOutputED1Ev>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3310      	adds	r3, #16
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd f95d 	bl	8001764 <_ZNSt10shared_ptrI7DS18B20ED1Ev>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3308      	adds	r3, #8
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd f973 	bl	800179a <_ZNSt10shared_ptrI14AdaptiveFilterED1Ev>
	// TODO Auto-generated destructor stub
}
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	08008198 	.word	0x08008198

080044c4 <_ZN13PID_RegulatorD0Ev>:
PID_Regulator::~PID_Regulator() {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
}
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffdb 	bl	8004488 <_ZN13PID_RegulatorD1Ev>
 80044d2:	2148      	movs	r1, #72	; 0x48
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f003 f9d9 	bl	800788c <_ZdlPvj>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZN13PID_Regulator5ClampEfff>:

float PID_Regulator::GetTemperature() {
	return filter_->RenewVal(ds18b20_->readTemperature());
}

float PID_Regulator::Clamp(float value, float min, float max) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  return (value < min)? min : (value > max)? max : value;
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f7fc fd05 	bl	8000f04 <__aeabi_fcmplt>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <_ZN13PID_Regulator5ClampEfff+0x20>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	e009      	b.n	8004518 <_ZN13PID_Regulator5ClampEfff+0x34>
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7fc fd1a 	bl	8000f40 <__aeabi_fcmpgt>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <_ZN13PID_Regulator5ClampEfff+0x32>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	e000      	b.n	8004518 <_ZN13PID_Regulator5ClampEfff+0x34>
 8004516:	68bb      	ldr	r3, [r7, #8]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <_ZN13PID_Regulator11GetNewWidthEf>:

int PID_Regulator::GetNewWidth (float input) {
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	 float err = (float)target_temp_ - input;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	791b      	ldrb	r3, [r3, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc faf2 	bl	8000b18 <__aeabi_ui2f>
 8004534:	4603      	mov	r3, r0
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc fa3b 	bl	80009b4 <__aeabi_fsub>
 800453e:	4603      	mov	r3, r0
 8004540:	60fb      	str	r3, [r7, #12]
	 integral_ = Clamp(integral_ + (float)err * dt_ * ki_, min_out_, max_out_);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc fae8 	bl	8000b20 <__aeabi_i2f>
 8004550:	4603      	mov	r3, r0
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fb37 	bl	8000bc8 <__aeabi_fmul>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fc fb2f 	bl	8000bc8 <__aeabi_fmul>
 800456a:	4603      	mov	r3, r0
 800456c:	4619      	mov	r1, r3
 800456e:	4620      	mov	r0, r4
 8004570:	f7fc fa22 	bl	80009b8 <__addsf3>
 8004574:	4603      	mov	r3, r0
 8004576:	461d      	mov	r5, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc facf 	bl	8000b20 <__aeabi_i2f>
 8004582:	4604      	mov	r4, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fac9 	bl	8000b20 <__aeabi_i2f>
 800458e:	4603      	mov	r3, r0
 8004590:	4622      	mov	r2, r4
 8004592:	4629      	mov	r1, r5
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ffa5 	bl	80044e4 <_ZN13PID_Regulator5ClampEfff>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
	 float D = (err - prev_err_) / dt_;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	4619      	mov	r1, r3
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7fc fa04 	bl	80009b4 <__aeabi_fsub>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461c      	mov	r4, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fab3 	bl	8000b20 <__aeabi_i2f>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4619      	mov	r1, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc fbb6 	bl	8000d30 <__aeabi_fdiv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	60bb      	str	r3, [r7, #8]
	 prev_err_ = err;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
	 return Clamp(err * kp_ + integral_ + D * kd_, min_out_, max_out_);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fc faf7 	bl	8000bc8 <__aeabi_fmul>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fc f9e7 	bl	80009b8 <__addsf3>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461c      	mov	r4, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fc fae7 	bl	8000bc8 <__aeabi_fmul>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4619      	mov	r1, r3
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fc f9da 	bl	80009b8 <__addsf3>
 8004604:	4603      	mov	r3, r0
 8004606:	461d      	mov	r5, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	4618      	mov	r0, r3
 800460e:	f7fc fa87 	bl	8000b20 <__aeabi_i2f>
 8004612:	4604      	mov	r4, r0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	4618      	mov	r0, r3
 800461a:	f7fc fa81 	bl	8000b20 <__aeabi_i2f>
 800461e:	4603      	mov	r3, r0
 8004620:	4622      	mov	r2, r4
 8004622:	4629      	mov	r1, r5
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff5d 	bl	80044e4 <_ZN13PID_Regulator5ClampEfff>
 800462a:	4603      	mov	r3, r0
 800462c:	4618      	mov	r0, r3
 800462e:	f7fc fc91 	bl	8000f54 <__aeabi_f2iz>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bdb0      	pop	{r4, r5, r7, pc}

0800463c <_ZN13PID_Regulator18TemperatureSupportEf>:

void PID_Regulator::TemperatureSupport(float current_temp) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  // calling this function in CppMain every second
  // regulation range: 1-10 sec
  if (cycle_ == kOff) {  // start new cycle
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11b      	bne.n	8004688 <_ZN13PID_Regulator18TemperatureSupportEf+0x4c>
    heat_up_ = GetNewWidth(current_temp);  // heating time (sec)
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff64 	bl	8004520 <_ZN13PID_Regulator11GetNewWidthEf>
 8004658:	4603      	mov	r3, r0
 800465a:	b2da      	uxtb	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    cool_down_ = period_ - heat_up_;  // cooling time (sec)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b2da      	uxtb	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    cycle_ = kOn;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    stage_ = kCoolDown;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }
  if(cycle_ == kOn) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800468e:	2b01      	cmp	r3, #1
 8004690:	d157      	bne.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
    if (stage_ == kCoolDown) {  // cooling
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11f      	bne.n	80046dc <_ZN13PID_Regulator18TemperatureSupportEf+0xa0>
      if (cool_down_ != 0) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <_ZN13PID_Regulator18TemperatureSupportEf+0x8c>
        relay_-> Off();
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3318      	adds	r3, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fe68 	bl	8004380 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f89d 	bl	80047f2 <_ZN11RelayOutput3OffEv>
        --cool_down_;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046be:	3b01      	subs	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	  }
      if (cool_down_ == 0) stage_ = kHeatUp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d137      	bne.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    } else if (heat_up_ == 0 && cool_down_ == 0) {  // end of cycle
      relay_-> Off();
      cycle_ = kOff;
    }
  }
}
 80046da:	e032      	b.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
	} else if(stage_ == kHeatUp && heat_up_ != 0) {  // heating
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d116      	bne.n	8004714 <_ZN13PID_Regulator18TemperatureSupportEf+0xd8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d011      	beq.n	8004714 <_ZN13PID_Regulator18TemperatureSupportEf+0xd8>
      relay_-> On();
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3318      	adds	r3, #24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fe43 	bl	8004380 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f861 	bl	80047c4 <_ZN11RelayOutput2OnEv>
      --heat_up_;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004708:	3b01      	subs	r3, #1
 800470a:	b2da      	uxtb	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8004712:	e016      	b.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
    } else if (heat_up_ == 0 && cool_down_ == 0) {  // end of cycle
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471a:	2b00      	cmp	r3, #0
 800471c:	d111      	bne.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10c      	bne.n	8004742 <_ZN13PID_Regulator18TemperatureSupportEf+0x106>
      relay_-> Off();
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3318      	adds	r3, #24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fe27 	bl	8004380 <_ZNKSt19__shared_ptr_accessI11RelayOutputLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f85c 	bl	80047f2 <_ZN11RelayOutput3OffEv>
      cycle_ = kOff;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <_ZN11RelayOutputC1Ev>:
 *      Author: abramov.a
 */

#include "RelayOutput.hpp"

RelayOutput::RelayOutput() {
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	4a09      	ldr	r2, [pc, #36]	; (800477c <_ZN11RelayOutputC1Ev+0x30>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]

	relay_gpiox_ = GPIOB;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <_ZN11RelayOutputC1Ev+0x34>)
 800475e:	605a      	str	r2, [r3, #4]
	relay_gpio_pin_ = GPIO_PIN_9;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	811a      	strh	r2, [r3, #8]
	relay_state_ = kRelayOff;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	729a      	strb	r2, [r3, #10]
}
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	080081a8 	.word	0x080081a8
 8004780:	40010c00 	.word	0x40010c00

08004784 <_ZN11RelayOutputD1Ev>:

RelayOutput::~RelayOutput() {
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <_ZN11RelayOutputD1Ev+0x1c>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	080081a8 	.word	0x080081a8

080047a4 <_ZN11RelayOutputD0Ev>:
RelayOutput::~RelayOutput() {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
}
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ffe9 	bl	8004784 <_ZN11RelayOutputD1Ev>
 80047b2:	210c      	movs	r1, #12
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f003 f869 	bl	800788c <_ZdlPvj>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <_ZN11RelayOutput2OnEv>:

void RelayOutput::On() {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	if (relay_state_ == kRelayOff) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7a9b      	ldrb	r3, [r3, #10]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10a      	bne.n	80047ea <_ZN11RelayOutput2OnEv+0x26>
		HAL_GPIO_WritePin(relay_gpiox_, relay_gpio_pin_, GPIO_PIN_SET);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6858      	ldr	r0, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	891b      	ldrh	r3, [r3, #8]
 80047dc:	2201      	movs	r2, #1
 80047de:	4619      	mov	r1, r3
 80047e0:	f002 f803 	bl	80067ea <HAL_GPIO_WritePin>
		relay_state_ = kRelayOn;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	729a      	strb	r2, [r3, #10]
	}
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <_ZN11RelayOutput3OffEv>:

void RelayOutput::Off() {
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
	if (relay_state_ == kRelayOn) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7a9b      	ldrb	r3, [r3, #10]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <_ZN11RelayOutput3OffEv+0x26>
		HAL_GPIO_WritePin(relay_gpiox_, relay_gpio_pin_, GPIO_PIN_RESET);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6858      	ldr	r0, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	891b      	ldrh	r3, [r3, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	4619      	mov	r1, r3
 800480e:	f001 ffec 	bl	80067ea <HAL_GPIO_WritePin>
		relay_state_ = kRelayOff;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	729a      	strb	r2, [r3, #10]
	}
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f805 	bl	800483e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    }
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fc53 	bl	800511e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EED1Ev>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <_ZN6TM1637C1Ev>:
 *      Author: abramov.a
 */

#include "TM1637.hpp"

TM1637::TM1637() {
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <_ZN6TM1637C1Ev+0xb8>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <_ZN6TM1637C1Ev+0xbc>)
 8004896:	3304      	adds	r3, #4
 8004898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800489c:	e883 0003 	stmia.w	r3, {r0, r1}
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a28      	ldr	r2, [pc, #160]	; (8004944 <_ZN6TM1637C1Ev+0xc0>)
 80048a4:	330c      	adds	r3, #12
 80048a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048aa:	6018      	str	r0, [r3, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	8019      	strh	r1, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	749a      	strb	r2, [r3, #18]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	74da      	strb	r2, [r3, #19]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <_ZN6TM1637C1Ev+0xc4>)
 80048c0:	3314      	adds	r3, #20
 80048c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048c6:	6018      	str	r0, [r3, #0]
 80048c8:	3304      	adds	r3, #4
 80048ca:	7019      	strb	r1, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f103 041c 	add.w	r4, r3, #28
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <_ZN6TM1637C1Ev+0xc8>)
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	230a      	movs	r3, #10
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fbcb 	bl	800507a <_ZNSaISt4pairIKchEEC1Ev>
 80048e4:	f107 0210 	add.w	r2, r7, #16
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	f107 0208 	add.w	r2, r7, #8
 80048f4:	ca06      	ldmia	r2, {r1, r2}
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 fbd5 	bl	80050a6 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fbc6 	bl	8005092 <_ZNSaISt4pairIKchEED1Ev>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a11      	ldr	r2, [pc, #68]	; (8004950 <_ZN6TM1637C1Ev+0xcc>)
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	871a      	strh	r2, [r3, #56]	; 0x38
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <_ZN6TM1637C1Ev+0xd0>)
 800492c:	333e      	adds	r3, #62	; 0x3e
 800492e:	6810      	ldr	r0, [r2, #0]
 8004930:	6018      	str	r0, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	080081b8 	.word	0x080081b8
 8004940:	08008080 	.word	0x08008080
 8004944:	08008088 	.word	0x08008088
 8004948:	08008090 	.word	0x08008090
 800494c:	080081c0 	.word	0x080081c0
 8004950:	40010c00 	.word	0x40010c00
 8004954:	08008098 	.word	0x08008098

08004958 <_ZN6TM1637D1Ev>:

TM1637::~TM1637() {
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	4a06      	ldr	r2, [pc, #24]	; (800497c <_ZN6TM1637D1Ev+0x24>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	331c      	adds	r3, #28
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff7c 	bl	8004868 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEED1Ev>
	// TODO Auto-generated destructor stub
}
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	080081b8 	.word	0x080081b8

08004980 <_ZN6TM1637D0Ev>:
TM1637::~TM1637() {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
}
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffe5 	bl	8004958 <_ZN6TM1637D1Ev>
 800498e:	2144      	movs	r1, #68	; 0x44
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f002 ff7b 	bl	800788c <_ZdlPvj>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZN6TM16377CLKhighEv>:

void TM1637::CLKhigh() {  //SCL high period
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_SET);  //Setting SCL frequency
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049b0:	2201      	movs	r2, #1
 80049b2:	4619      	mov	r1, r3
 80049b4:	f001 ff19 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_SET);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049c0:	2201      	movs	r2, #1
 80049c2:	4619      	mov	r1, r3
 80049c4:	f001 ff11 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_SET);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049d0:	2201      	movs	r2, #1
 80049d2:	4619      	mov	r1, r3
 80049d4:	f001 ff09 	bl	80067ea <HAL_GPIO_WritePin>
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZN6TM16376CLKlowEv>:

void TM1637::CLKlow() {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_RESET);  //SCL low period
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049f0:	2200      	movs	r2, #0
 80049f2:	4619      	mov	r1, r3
 80049f4:	f001 fef9 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004a00:	2200      	movs	r2, #0
 8004a02:	4619      	mov	r1, r3
 8004a04:	f001 fef1 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004a10:	2200      	movs	r2, #0
 8004a12:	4619      	mov	r1, r3
 8004a14:	f001 fee9 	bl	80067ea <HAL_GPIO_WritePin>
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZN6TM16377SDOhighEv>:

void TM1637::SDOhigh() {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_SET);     //SDO high period
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a30:	2201      	movs	r2, #1
 8004a32:	4619      	mov	r1, r3
 8004a34:	f001 fed9 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_SET);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a40:	2201      	movs	r2, #1
 8004a42:	4619      	mov	r1, r3
 8004a44:	f001 fed1 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_SET);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a50:	2201      	movs	r2, #1
 8004a52:	4619      	mov	r1, r3
 8004a54:	f001 fec9 	bl	80067ea <HAL_GPIO_WritePin>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <_ZN6TM16376SDOlowEv>:

void TM1637::SDOlow() {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_RESET);	  //SDO low period
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a70:	2200      	movs	r2, #0
 8004a72:	4619      	mov	r1, r3
 8004a74:	f001 feb9 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_RESET);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a80:	2200      	movs	r2, #0
 8004a82:	4619      	mov	r1, r3
 8004a84:	f001 feb1 	bl	80067ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_SDO_Port, SDo_Pin, GPIO_PIN_RESET);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a90:	2200      	movs	r2, #0
 8004a92:	4619      	mov	r1, r3
 8004a94:	f001 fea9 	bl	80067ea <HAL_GPIO_WritePin>
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_ZN6TM163711StartPacketEv>:

void TM1637::StartPacket() {									   //Lower SDO line while CLK line is high
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	CLKhigh();
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff79 	bl	80049a0 <_ZN6TM16377CLKhighEv>
	SDOhigh();
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ffb6 	bl	8004a20 <_ZN6TM16377SDOhighEv>
	SDOlow();
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ffd3 	bl	8004a60 <_ZN6TM16376SDOlowEv>
	CLKlow();
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff90 	bl	80049e0 <_ZN6TM16376CLKlowEv>
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <_ZN6TM16379EndPacketEv>:

void TM1637::EndPacket() {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	CLKlow();
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff85 	bl	80049e0 <_ZN6TM16376CLKlowEv>
	SDOlow();
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ffc2 	bl	8004a60 <_ZN6TM16376SDOlowEv>
	CLKhigh();
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff5f 	bl	80049a0 <_ZN6TM16377CLKhighEv>
	SDOhigh();
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ff9c 	bl	8004a20 <_ZN6TM16377SDOhighEv>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZN6TM16377DataOutEPh>:

void TM1637::DataOut(uint8_t* TxBuffer)	{						   //Low level data transfer function
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	for(int8_t j = 0; j < commands[4]; j++)	{					   //Send least significant bit first
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3314      	adds	r3, #20
 8004b06:	2104      	movs	r1, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fb1d 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	429c      	cmp	r4, r3
 8004b14:	bfb4      	ite	lt
 8004b16:	2301      	movlt	r3, #1
 8004b18:	2300      	movge	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01a      	beq.n	8004b56 <_ZN6TM16377DataOutEPh+0x66>
		CLKlow();
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ff5d 	bl	80049e0 <_ZN6TM16376CLKlowEv>
		if(TxBuffer[j] == GPIO_PIN_SET)	{						   //Check logic level
 8004b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d103      	bne.n	8004b3c <_ZN6TM16377DataOutEPh+0x4c>
			SDOhigh();
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff73 	bl	8004a20 <_ZN6TM16377SDOhighEv>
 8004b3a:	e002      	b.n	8004b42 <_ZN6TM16377DataOutEPh+0x52>
		} else {
			SDOlow();
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff8f 	bl	8004a60 <_ZN6TM16376SDOlowEv>
		}
		CLKhigh();
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff2c 	bl	80049a0 <_ZN6TM16377CLKhighEv>
	for(int8_t j = 0; j < commands[4]; j++)	{					   //Send least significant bit first
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e7d3      	b.n	8004afe <_ZN6TM16377DataOutEPh+0xe>
	}
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}

08004b5e <_ZN6TM16379TxCommandEPh>:

void TM1637::TxCommand(uint8_t* command) {   						//Handles high level (bit by bit) transmission operation
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
	uint8_t byteData[8] = {0};
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 0; i < commands[4]; i++) {
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3314      	adds	r3, #20
 8004b78:	2104      	movs	r1, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fae4 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004b80:	4603      	mov	r3, r0
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	7dfa      	ldrb	r2, [r7, #23]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	bf34      	ite	cc
 8004b8a:	2301      	movcc	r3, #1
 8004b8c:	2300      	movcs	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <_ZN6TM16379TxCommandEPh+0x62>
		byteData[i] = (command[0] & (0x01 << i)) && 1;																		//Convert from byte to bit per array element
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	fa42 f303 	asr.w	r3, r2, r3
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	443b      	add	r3, r7
 8004bb4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < commands[4]; i++) {
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
 8004bbe:	e7d9      	b.n	8004b74 <_ZN6TM16379TxCommandEPh+0x16>
	}
	StartPacket();												    //Send start packet bit
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff6d 	bl	8004aa0 <_ZN6TM163711StartPacketEv>
	DataOut(byteData);											    //Send one byte
 8004bc6:	f107 030c 	add.w	r3, r7, #12
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff8f 	bl	8004af0 <_ZN6TM16377DataOutEPh>
	CLKlow();													    //Send one CLK for acknowledgment
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff04 	bl	80049e0 <_ZN6TM16376CLKlowEv>
	CLKhigh();
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fee1 	bl	80049a0 <_ZN6TM16377CLKhighEv>
	ACKcheck();													    //wait for acknowledgment.
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f888 	bl	8004cf4 <_ZN6TM16378ACKcheckEv>
	if((command[0] & 0xC0) != (0xC0)) {								//Check if the received packet is not an address.
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bec:	2bc0      	cmp	r3, #192	; 0xc0
 8004bee:	d002      	beq.n	8004bf6 <_ZN6TM16379TxCommandEPh+0x98>
		EndPacket();
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff69 	bl	8004ac8 <_ZN6TM16379EndPacketEv>
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <_ZN6TM16376TxDataEPhh>:

void TM1637::TxData(uint8_t* data, uint8_t packetSize) {																//Handles high level (bit by bit) transmission operation
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
	uint8_t byteData[8] = {0};
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	2300      	movs	r3, #0
 8004c12:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < packetSize; i++) {
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	7ffa      	ldrb	r2, [r7, #31]
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d22f      	bcs.n	8004c80 <_ZN6TM16376TxDataEPhh+0x82>
		for(uint8_t j = 0; j < 8; j++) {
 8004c20:	2300      	movs	r3, #0
 8004c22:	77bb      	strb	r3, [r7, #30]
 8004c24:	7fbb      	ldrb	r3, [r7, #30]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d817      	bhi.n	8004c5a <_ZN6TM16376TxDataEPhh+0x5c>
			byteData[j] = (data[i] & (0x01 << j)) && 1;
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	4413      	add	r3, r2
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
 8004c36:	fa42 f303 	asr.w	r3, r2, r3
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	7fbb      	ldrb	r3, [r7, #30]
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	443b      	add	r3, r7
 8004c4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++) {
 8004c52:	7fbb      	ldrb	r3, [r7, #30]
 8004c54:	3301      	adds	r3, #1
 8004c56:	77bb      	strb	r3, [r7, #30]
 8004c58:	e7e4      	b.n	8004c24 <_ZN6TM16376TxDataEPhh+0x26>
		}
		DataOut(byteData);
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff ff45 	bl	8004af0 <_ZN6TM16377DataOutEPh>
		CLKlow();
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff feba 	bl	80049e0 <_ZN6TM16376CLKlowEv>
		CLKhigh();
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fe97 	bl	80049a0 <_ZN6TM16377CLKhighEv>
		ACKcheck();	//Transmit byte by byte
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f83e 	bl	8004cf4 <_ZN6TM16378ACKcheckEv>
	for(uint8_t i = 0; i < packetSize; i++) {
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e7cb      	b.n	8004c18 <_ZN6TM16376TxDataEPhh+0x1a>
	}
	EndPacket(); //Send end packet at the end of data transmission.
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff21 	bl	8004ac8 <_ZN6TM16379EndPacketEv>
}
 8004c86:	bf00      	nop
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <_ZN6TM163710InitializeEh>:

void TM1637::Initialize(uint8_t direction)	{							//Since SDI line is doing both transmission and reception
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
    																	//the corresponding GPIO pin must be reinitialized on the run
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SCLK_Pin;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004cae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	617b      	str	r3, [r7, #20]
	switch (direction) {
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <_ZN6TM163710InitializeEh+0x34>
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d009      	beq.n	8004cd6 <_ZN6TM163710InitializeEh+0x46>
	  case 1:
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
	  break;
	}
}
 8004cc2:	e011      	b.n	8004ce8 <_ZN6TM163710InitializeEh+0x58>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4808      	ldr	r0, [pc, #32]	; (8004cf0 <_ZN6TM163710InitializeEh+0x60>)
 8004cd0:	f001 fbf0 	bl	80064b4 <HAL_GPIO_Init>
	  break;
 8004cd4:	e008      	b.n	8004ce8 <_ZN6TM163710InitializeEh+0x58>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4803      	ldr	r0, [pc, #12]	; (8004cf0 <_ZN6TM163710InitializeEh+0x60>)
 8004ce2:	f001 fbe7 	bl	80064b4 <HAL_GPIO_Init>
	  break;
 8004ce6:	bf00      	nop
}
 8004ce8:	bf00      	nop
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40011400 	.word	0x40011400

08004cf4 <_ZN6TM16378ACKcheckEv>:

void TM1637::ACKcheck() {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	//Wait for acknowledgment bit
	Initialize(settings[1]);										//initialize pin as input
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3312      	adds	r3, #18
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fa2f 	bl	8005166 <_ZNSt5arrayIhLj2EEixEj>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffbe 	bl	8004c90 <_ZN6TM163710InitializeEh>
	CLKlow();													//lower CLK line
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fe63 	bl	80049e0 <_ZN6TM16376CLKlowEv>
	while(HAL_GPIO_ReadPin(SCLK_SDO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f001 fd49 	bl	80067bc <HAL_GPIO_ReadPin>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <_ZN6TM16378ACKcheckEv+0x60>
	Initialize(settings[0]);										//initialize pin as output for data transfer
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3312      	adds	r3, #18
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fa10 	bl	8005166 <_ZNSt5arrayIhLj2EEixEj>
 8004d46:	4603      	mov	r3, r0
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff9f 	bl	8004c90 <_ZN6TM163710InitializeEh>
	while(HAL_GPIO_ReadPin(SCLK_SDO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8004d52:	e7e2      	b.n	8004d1a <_ZN6TM16378ACKcheckEv+0x26>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <_ZN6TM163712DisplayClearEv>:

void TM1637::DisplayClear() {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	uint8_t emptyBuffer[4]{0};
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
	uint8_t commandCarrier[1]{0};
 8004d68:	2300      	movs	r3, #0
 8004d6a:	723b      	strb	r3, [r7, #8]
	commandCarrier[0] = commands[0];									//Send set data command
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f9e8 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	723b      	strb	r3, [r7, #8]
	TxCommand(commandCarrier);
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff feea 	bl	8004b5e <_ZN6TM16379TxCommandEPh>
	commandCarrier[0] = addresses[0];										//Set address
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f9f7 	bl	8005184 <_ZNSt5arrayIhLj6EEixEj>
 8004d96:	4603      	mov	r3, r0
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	723b      	strb	r3, [r7, #8]
	TxCommand(commandCarrier);
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fedb 	bl	8004b5e <_ZN6TM16379TxCommandEPh>
	TxData(emptyBuffer, 4);
 8004da8:	f107 030c 	add.w	r3, r7, #12
 8004dac:	2204      	movs	r2, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff24 	bl	8004bfe <_ZN6TM16376TxDataEPhh>
	commandCarrier[0] = commands[3];
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3314      	adds	r3, #20
 8004dba:	2103      	movs	r1, #3
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f9c3 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	723b      	strb	r3, [r7, #8]
	TxCommand(commandCarrier);
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fec5 	bl	8004b5e <_ZN6TM16379TxCommandEPh>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZN6TM163713DisplayHandleEhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

uint8_t TM1637::DisplayHandle(uint8_t brightness, std::string str) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	460b      	mov	r3, r1
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	72fb      	strb	r3, [r7, #11]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t commandCarrier[1]{0};
 8004dea:	2300      	movs	r3, #0
 8004dec:	743b      	strb	r3, [r7, #16]
	TM1637Status parameterFalidation = TM1637_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(brightness <= 7) {
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	2b07      	cmp	r3, #7
 8004df8:	d840      	bhi.n	8004e7c <_ZN6TM163713DisplayHandleEhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	  commandCarrier[0] = commands[0];									//Send set data command
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9a1 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004e06:	4603      	mov	r3, r0
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	743b      	strb	r3, [r7, #16]
	  TxCommand(commandCarrier);
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4619      	mov	r1, r3
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff fea3 	bl	8004b5e <_ZN6TM16379TxCommandEPh>
	  commandCarrier[0] = addresses[0];										//Set address
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f9b0 	bl	8005184 <_ZNSt5arrayIhLj6EEixEj>
 8004e24:	4603      	mov	r3, r0
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	743b      	strb	r3, [r7, #16]
	  TxCommand(commandCarrier);
 8004e2a:	f107 0310 	add.w	r3, r7, #16
 8004e2e:	4619      	mov	r1, r3
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fe94 	bl	8004b5e <_ZN6TM16379TxCommandEPh>

	  FillBuffer(str);
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fd f878 	bl	8001f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	4619      	mov	r1, r3
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f8f6 	bl	800503a <_ZN6TM163710FillBufferENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fc ff43 	bl	8001cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  TxData(displayBuffer, 4);								//Map the data stored in RAM to the display
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	333e      	adds	r3, #62	; 0x3e
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff fecc 	bl	8004bfe <_ZN6TM16376TxDataEPhh>
	  SetBrighness(brightness);								//Turn on display and set brightness
 8004e66:	7afb      	ldrb	r3, [r7, #11]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f80c 	bl	8004e88 <_ZN6TM163712SetBrighnessEh>
	  parameterFalidation = TM1637_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  return parameterFalidation;
 8004e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e7a:	e001      	b.n	8004e80 <_ZN6TM163713DisplayHandleEhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>
	}
	return parameterFalidation;
 8004e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3730      	adds	r7, #48	; 0x30
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <_ZN6TM163712SetBrighnessEh>:

TM1637Status TM1637::SetBrighness(uint8_t brighnessLevel) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
	uint8_t brighnessBuffer[8] = {0};
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
	TM1637Status parameterFalidation = TM1637_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75bb      	strb	r3, [r7, #22]
	if(brighnessLevel <= 7)	{											//there are 7 levels of brightness
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d83c      	bhi.n	8004f20 <_ZN6TM163712SetBrighnessEh+0x98>
																		//Any value above that will be ignored.
		brighnessLevel = brighnessLevel | commands[2];					//Set Brightness level with display on command
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f94b 	bl	8005148 <_ZNSt5arrayIhLj5EEixEj>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	70fb      	strb	r3, [r7, #3]

		for(uint8_t i = 0; i < 8; i++) {
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	d813      	bhi.n	8004eee <_ZN6TM163712SetBrighnessEh+0x66>
			brighnessBuffer[i] = (brighnessLevel & (0x01 << i)) && 1;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	fa42 f303 	asr.w	r3, r2, r3
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf14      	ite	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	2300      	moveq	r3, #0
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	3318      	adds	r3, #24
 8004ee0:	443b      	add	r3, r7
 8004ee2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++) {
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
 8004eec:	e7e8      	b.n	8004ec0 <_ZN6TM163712SetBrighnessEh+0x38>
		}
		StartPacket();
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fdd6 	bl	8004aa0 <_ZN6TM163711StartPacketEv>
		DataOut(brighnessBuffer);
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fdf8 	bl	8004af0 <_ZN6TM16377DataOutEPh>
		CLKlow();													//Send one CLK for acknowledgment
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fd6d 	bl	80049e0 <_ZN6TM16376CLKlowEv>
		CLKhigh();
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fd4a 	bl	80049a0 <_ZN6TM16377CLKhighEv>
		ACKcheck();													//wait for acknowledgment.
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fef1 	bl	8004cf4 <_ZN6TM16378ACKcheckEv>
		EndPacket();
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fdd8 	bl	8004ac8 <_ZN6TM16379EndPacketEv>
		parameterFalidation = TM1637_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75bb      	strb	r3, [r7, #22]
		return parameterFalidation;
 8004f1c:	7dbb      	ldrb	r3, [r7, #22]
 8004f1e:	e000      	b.n	8004f22 <_ZN6TM163712SetBrighnessEh+0x9a>
	}
	return parameterFalidation;
 8004f20:	7dbb      	ldrb	r3, [r7, #22]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZZN6TM163710FillBufferENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRcE_clES6_>:

void TM1637::FillBuffer(std::string str) {
	uint8_t i = 0;
	std::for_each(str.begin(), str.end(), [this,&i](char& ch) {
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
	  displayBuffer[i] = alphabet.at(ch);
 8004f38:	331c      	adds	r3, #28
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f961 	bl	8005204 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_>
 8004f42:	4601      	mov	r1, r0
	std::for_each(str.begin(), str.end(), [this,&i](char& ch) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6852      	ldr	r2, [r2, #4]
	  displayBuffer[i] = alphabet.at(ch);
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	4610      	mov	r0, r2
 8004f50:	780a      	ldrb	r2, [r1, #0]
 8004f52:	4403      	add	r3, r0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	std::for_each(str.begin(), str.end(), [this,&i](char& ch) {
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
	  ++i;
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	3201      	adds	r2, #1
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
	});
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
	return *this;
 8004f92:	687b      	ldr	r3, [r7, #4]
      }
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <_ZN9__gnu_cxxeqIPcS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004f9e:	b590      	push	{r4, r7, lr}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ffdf 	bl	8004f6c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	681c      	ldr	r4, [r3, #0]
 8004fb2:	6838      	ldr	r0, [r7, #0]
 8004fb4:	f7ff ffda 	bl	8004f6c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEZN6TM163710FillBufferES8_EUlRcE_ET0_T_SE_SD_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8004fce:	b082      	sub	sp, #8
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	61fb      	str	r3, [r7, #28]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 8004fde:	1d3a      	adds	r2, r7, #4
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff ffd9 	bl	8004f9e <_ZN9__gnu_cxxeqIPcS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f083 0301 	eor.w	r3, r3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d011      	beq.n	800501c <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEZN6TM163710FillBufferES8_EUlRcE_ET0_T_SE_SD_+0x4e>
	__f(*__first);
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f945 	bl	800528c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8005002:	4602      	mov	r2, r0
 8005004:	f107 031c 	add.w	r3, r7, #28
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff ff8d 	bl	8004f2a <_ZZN6TM163710FillBufferENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRcE_clES6_>
      for (; __first != __last; ++__first)
 8005010:	f107 0308 	add.w	r3, r7, #8
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff ffb3 	bl	8004f80 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800501a:	e7e0      	b.n	8004fde <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEZN6TM163710FillBufferES8_EUlRcE_ET0_T_SE_SD_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f107 031c 	add.w	r3, r7, #28
 8005024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005028:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005036:	b002      	add	sp, #8
 8005038:	4770      	bx	lr

0800503a <_ZN6TM163710FillBufferENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void TM1637::FillBuffer(std::string str) {
 800503a:	b590      	push	{r4, r7, lr}
 800503c:	b08b      	sub	sp, #44	; 0x2c
 800503e:	af02      	add	r7, sp, #8
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]
	});
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f000 f8aa 	bl	80051a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800504e:	4604      	mov	r4, r0
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f000 f8bc 	bl	80051ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8005056:	4602      	mov	r2, r0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	f107 030f 	add.w	r3, r7, #15
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	f107 0010 	add.w	r0, r7, #16
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4621      	mov	r1, r4
 800506e:	f7ff ffae 	bl	8004fce <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEZN6TM163710FillBufferES8_EUlRcE_ET0_T_SE_SD_>
}
 8005072:	bf00      	nop
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}

0800507a <_ZNSaISt4pairIKchEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f90d 	bl	80052a2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKchEEC1Ev>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <_ZNSaISt4pairIKchEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 80050a6:	b5b0      	push	{r4, r5, r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	1d38      	adds	r0, r7, #4
 80050b0:	e880 0006 	stmia.w	r0, {r1, r2}
 80050b4:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80050b6:	68fc      	ldr	r4, [r7, #12]
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f8f9 	bl	80052b6 <_ZNSaISt4pairIKchEEC1ERKS2_>
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	461a      	mov	r2, r3
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f900 	bl	80052d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EEC1ERKS6_RKS7_>
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ffdb 	bl	8005092 <_ZNSaISt4pairIKchEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80050dc:	68fc      	ldr	r4, [r7, #12]
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 f914 	bl	800530e <_ZNKSt16initializer_listISt4pairIKchEE5beginEv>
 80050e6:	4605      	mov	r5, r0
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f91a 	bl	8005324 <_ZNKSt16initializer_listISt4pairIKchEE3endEv>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	4629      	mov	r1, r5
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f926 	bl	8005348 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bdb0      	pop	{r4, r5, r7, pc}

08005106 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f946 	bl	80053a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEED1Ev>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f963 	bl	80053f2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv>
 800512c:	4603      	mov	r3, r0
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f93f 	bl	80053b4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff ffe4 	bl	8005106 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <_ZNSt5arrayIhLj5EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f956 	bl	8005408 <_ZNSt14__array_traitsIhLj5EE6_S_refERA5_Khj>
 800515c:	4603      	mov	r3, r0
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_ZNSt5arrayIhLj2EEixEj>:
      operator[](size_type __n) noexcept
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f954 	bl	8005422 <_ZNSt14__array_traitsIhLj2EE6_S_refERA2_Khj>
 800517a:	4603      	mov	r3, r0
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f952 	bl	800543c <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 8005198:	4603      	mov	r3, r0
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
      { return iterator(_M_data()); }
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ff6c 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80051b0:	4603      	mov	r3, r0
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	f107 020c 	add.w	r2, r7, #12
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f949 	bl	8005456 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80051ce:	b590      	push	{r4, r7, lr}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
      { return iterator(_M_data() + this->size()); }
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc ff56 	bl	8002088 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80051dc:	4604      	mov	r4, r0
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fd8d 	bl	8001cfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4423      	add	r3, r4
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	f107 020c 	add.w	r2, r7, #12
 80051ee:	f107 0308 	add.w	r3, r7, #8
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f92e 	bl	8005456 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}

08005204 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_>:
       *  @return  A reference to the data whose key is equivalent to @a __k, if
       *           such a data is present in the %map.
       *  @throw  std::out_of_range  If no such data is present.
       */
      mapped_type&
      at(const key_type& __k)
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
      {
	iterator __i = lower_bound(__k);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f92f 	bl	8005474 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE11lower_boundERS3_>
 8005216:	4603      	mov	r3, r0
 8005218:	60fb      	str	r3, [r7, #12]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f939 	bl	8005492 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE3endEv>
 8005220:	4603      	mov	r3, r0
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	f107 0210 	add.w	r2, r7, #16
 8005228:	f107 030c 	add.w	r3, r7, #12
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f93c 	bl	80054ac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKchEES5_>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d112      	bne.n	8005260 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_+0x5c>
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f949 	bl	80054d2 <_ZNKSt3mapIchSt4lessIcESaISt4pairIKchEEE8key_compEv>
 8005240:	f107 030c 	add.w	r3, r7, #12
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f951 	bl	80054ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKchEEdeEv>
 800524a:	4603      	mov	r3, r0
 800524c:	461a      	mov	r2, r3
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f957 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_+0x60>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_+0x62>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_+0x6c>
	  __throw_out_of_range(__N("map::at"));
 800526a:	4807      	ldr	r0, [pc, #28]	; (8005288 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE2atERS3_+0x84>)
 800526c:	f002 fbe4 	bl	8007a38 <_ZSt20__throw_out_of_rangePKc>
	return (*__i).second;
 8005270:	f107 030c 	add.w	r3, r7, #12
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f939 	bl	80054ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKchEEdeEv>
 800527a:	4603      	mov	r3, r0
 800527c:	3301      	adds	r3, #1
      }
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	0800809c 	.word	0x0800809c

0800528c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKchEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <_ZNSaISt4pairIKchEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f934 	bl	8005530 <_ZN9__gnu_cxx13new_allocatorISt4pairIKchEEC1ERKS4_>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 80052d2:	b590      	push	{r4, r7, lr}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80052de:	68fc      	ldr	r4, [r7, #12]
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f92d 	bl	8005546 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEEC1IS2_EERKSaIT_E>
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	461a      	mov	r2, r3
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f933 	bl	8005560 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f84e 	bl	80053a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEED1Ev>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}

0800530e <_ZNKSt16initializer_listISt4pairIKchEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <_ZNKSt16initializer_listISt4pairIKchEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ffee 	bl	800530e <_ZNKSt16initializer_listISt4pairIKchEE5beginEv>
 8005332:	4604      	mov	r4, r0
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f930 	bl	800559a <_ZNKSt16initializer_listISt4pairIKchEE4sizeEv>
 800533a:	4603      	mov	r3, r0
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4423      	add	r3, r4
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f928 	bl	80055b0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	d017      	beq.n	8005398 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f92f 	bl	80055cc <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE3endEv>
 800536e:	4603      	mov	r3, r0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	f107 021c 	add.w	r2, r7, #28
 8005376:	f107 0318 	add.w	r3, r7, #24
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f936 	bl	80055ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKchEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f93e 	bl	800560c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	3302      	adds	r3, #2
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	e7e3      	b.n	8005360 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 8005398:	bf00      	nop
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d012      	beq.n	80053ea <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f000 f954 	bl	8005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fff0 	bl	80053b4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f000 f957 	bl	8005688 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80053da:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f95d 	bl	800569e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80053e8:	e7e9      	b.n	80053be <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
	}
    }
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <_ZNSt14__array_traitsIhLj5EE6_S_refERA5_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4413      	add	r3, r2
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <_ZNSt14__array_traitsIhLj2EE6_S_refERA2_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	4413      	add	r3, r2
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4413      	add	r3, r2
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE11lower_boundERS3_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f91c 	bl	80056c0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11lower_boundERS1_>
 8005488:	4603      	mov	r3, r0
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_ZNSt3mapIchSt4lessIcESaISt4pairIKchEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f895 	bl	80055cc <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE3endEv>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKchEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <_ZNKSt3mapIchSt4lessIcESaISt4pairIKchEEE8key_compEv>:
      key_comp() const
 80054d2:	b590      	push	{r4, r7, lr}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f906 	bl	80056ee <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8key_compEv>
 80054e2:	bf00      	nop
 80054e4:	4620      	mov	r0, r4
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}

080054ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKchEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f902 	bl	8005702 <_ZNSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>
 80054fe:	4603      	mov	r3, r0
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZNKSt4lessIcEclERKcS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	bf34      	ite	cc
 8005520:	2301      	movcc	r3, #1
 8005522:	2300      	movcs	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <_ZN9__gnu_cxx13new_allocatorISt4pairIKchEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8e4 	bl	800571e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEEC1Ev>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8e0 	bl	8005732 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKchEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8005572:	4603      	mov	r3, r0
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f8e5 	bl	8005746 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEEC1ERKS4_>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f8ee 	bl	8005762 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff f948 	bl	8004820 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZNKSt16initializer_listISt4pairIKchEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1d1a      	adds	r2, r3, #4
 80055d8:	f107 030c 	add.w	r3, r7, #12
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f8ca 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKchEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800560c:	b5b0      	push	{r4, r5, r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800561a:	f107 0318 	add.w	r3, r7, #24
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f9da 	bl	80059da <_ZNKSt10_Select1stISt4pairIKchEEclERKS2_>
 8005626:	4603      	mov	r3, r0
 8005628:	f107 0010 	add.w	r0, r7, #16
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f000 f8b0 	bl	8005794 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>

      if (__res.second)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00f      	beq.n	800565a <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800563a:	693c      	ldr	r4, [r7, #16]
 800563c:	697d      	ldr	r5, [r7, #20]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9d6 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005644:	4602      	mov	r2, r0
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	462a      	mov	r2, r5
 800564e:	4621      	mov	r1, r4
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f9d7 	bl	8005a04 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 8005656:	4603      	mov	r3, r0
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8005658:	e007      	b.n	800566a <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f888 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 8005668:	69fb      	ldr	r3, [r7, #28]
    }
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bdb0      	pop	{r4, r5, r7, pc}

08005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9f3 	bl	8005a96 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa04 	bl	8005ac0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fe91 	bl	80053f2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv>
 80056d0:	4604      	mov	r4, r0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa06 	bl	8005ae4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv>
 80056d8:	4602      	mov	r2, r0
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	4621      	mov	r1, r4
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa0b 	bl	8005afa <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_>
 80056e4:	4603      	mov	r3, r0
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd90      	pop	{r4, r7, pc}

080056ee <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8key_compEv>:
      key_comp() const
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80056f6:	bf00      	nop
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <_ZNSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>:
      _M_valptr()
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3310      	adds	r3, #16
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa24 	bl	8005b5c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKchEE6_M_ptrEv>
 8005714:	4603      	mov	r3, r0
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKchEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <_ZNSaISt13_Rb_tree_nodeISt4pairIKchEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa0e 	bl	8005b74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEEC1ERKS6_>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
      { }
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b08d      	sub	sp, #52	; 0x34
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f9f0 	bl	8005b8a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKchEE13_M_const_castEv>
 80057aa:	4603      	mov	r3, r0
 80057ac:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80057ae:	69bc      	ldr	r4, [r7, #24]
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f000 f997 	bl	8005ae4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv>
 80057b6:	4603      	mov	r3, r0
 80057b8:	429c      	cmp	r4, r3
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d030      	beq.n	8005828 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 80057c6:	68b8      	ldr	r0, [r7, #8]
 80057c8:	f000 f9f0 	bl	8005bac <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE4sizeEv>
 80057cc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d013      	beq.n	80057fa <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80057d2:	68bc      	ldr	r4, [r7, #8]
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f000 f9f4 	bl	8005bc2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv>
 80057da:	4603      	mov	r3, r0
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f9fa 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80057e4:	4603      	mov	r3, r0
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff fe8c 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 80057fa:	2300      	movs	r3, #0
	  if (size() > 0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8005800:	2300      	movs	r3, #0
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f000 f9dc 	bl	8005bc2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv>
 800580a:	4602      	mov	r2, r0
 800580c:	f107 031c 	add.w	r3, r7, #28
 8005810:	4619      	mov	r1, r3
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f9ec 	bl	8005bf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005818:	e0db      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f9fb 	bl	8005c1c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_>
 8005826:	e0d4      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8005828:	68bc      	ldr	r4, [r7, #8]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f9d3 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff fe65 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d057      	beq.n	80058f4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8005848:	69bc      	ldr	r4, [r7, #24]
 800584a:	68b8      	ldr	r0, [r7, #8]
 800584c:	f000 fa6b 	bl	8005d26 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv>
 8005850:	4603      	mov	r3, r0
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	429c      	cmp	r4, r3
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8005862:	68b8      	ldr	r0, [r7, #8]
 8005864:	f000 fa5f 	bl	8005d26 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv>
 8005868:	4604      	mov	r4, r0
 800586a:	68b8      	ldr	r0, [r7, #8]
 800586c:	f000 fa5b 	bl	8005d26 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	4621      	mov	r1, r4
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fa60 	bl	8005d3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800587c:	e0a9      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800587e:	68bc      	ldr	r4, [r7, #8]
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fa72 	bl	8005d6e <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEmmEv>
 800588a:	4603      	mov	r3, r0
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f9a2 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005894:	4603      	mov	r3, r0
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff fe34 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01f      	beq.n	80058e6 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fee2 	bl	8005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	f107 0214 	add.w	r2, r7, #20
 80058c6:	f107 0320 	add.w	r3, r7, #32
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f98f 	bl	8005bf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80058d2:	e07e      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80058d4:	f107 0218 	add.w	r2, r7, #24
 80058d8:	f107 0318 	add.w	r3, r7, #24
 80058dc:	4619      	mov	r1, r3
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa2c 	bl	8005d3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80058e4:	e075      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f995 	bl	8005c1c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_>
 80058f2:	e06e      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80058f4:	68bc      	ldr	r4, [r7, #8]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f96d 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80058fe:	4603      	mov	r3, r0
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff fdff 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d056      	beq.n	80059be <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8005914:	69bc      	ldr	r4, [r7, #24]
 8005916:	68b8      	ldr	r0, [r7, #8]
 8005918:	f000 f953 	bl	8005bc2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv>
 800591c:	4603      	mov	r3, r0
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	429c      	cmp	r4, r3
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f000 f945 	bl	8005bc2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv>
 8005938:	4602      	mov	r2, r0
 800593a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800593e:	4619      	mov	r1, r3
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f955 	bl	8005bf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005946:	e044      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8005948:	68bc      	ldr	r4, [r7, #8]
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fa1e 	bl	8005d90 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEppEv>
 8005954:	4603      	mov	r3, r0
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f93d 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fdcf 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01f      	beq.n	80059b0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fe7d 	bl	8005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8005988:	2300      	movs	r3, #0
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
 800598c:	f107 0218 	add.w	r2, r7, #24
 8005990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005994:	4619      	mov	r1, r3
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f92a 	bl	8005bf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800599c:	e019      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800599e:	f107 0210 	add.w	r2, r7, #16
 80059a2:	f107 0310 	add.w	r3, r7, #16
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f9c7 	bl	8005d3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80059ae:	e010      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f930 	bl	8005c1c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_>
 80059bc:	e009      	b.n	80059d2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80059be:	2300      	movs	r3, #0
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4619      	mov	r1, r3
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f9f0 	bl	8005db2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	3734      	adds	r7, #52	; 0x34
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}

080059da <_ZNKSt10_Select1stISt4pairIKchEEclERKS2_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11a      	bne.n	8005a4e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f863 	bl	8005ae4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005a26:	68fc      	ldr	r4, [r7, #12]
 8005a28:	f107 0310 	add.w	r3, r7, #16
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ffd3 	bl	80059da <_ZNKSt10_Select1stISt4pairIKchEEclERKS2_>
 8005a34:	4605      	mov	r5, r0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8ce 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4629      	mov	r1, r5
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff fd60 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8005a52:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005a54:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005a56:	6838      	ldr	r0, [r7, #0]
 8005a58:	f7ff ffca 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a62:	f000 f9bc 	bl	8005dde <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8005a66:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005a6c:	7ff8      	ldrb	r0, [r7, #31]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	f001 ff7d 	bl	8007970 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fe76 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 8005a8c:	697b      	ldr	r3, [r7, #20]
      }
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bdb0      	pop	{r4, r5, r7, pc}

08005a96 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005a96:	b590      	push	{r4, r7, lr}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f9b0 	bl	8005e06 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7ff fe2a 	bl	8005702 <_ZNSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f9b1 	bl	8005e1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE7destroyIS3_EEvRS5_PT_>
      }
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f99b 	bl	8005e06 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f9ab 	bl	8005e32 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE10deallocateERS5_PS4_j>
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005afa:	b590      	push	{r4, r7, lr}
 8005afc:	b087      	sub	sp, #28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01b      	beq.n	8005b46 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8005b0e:	68fc      	ldr	r4, [r7, #12]
 8005b10:	68b8      	ldr	r0, [r7, #8]
 8005b12:	f000 f9ad 	bl	8005e70 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8005b16:	4603      	mov	r3, r0
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff fcf3 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f083 0301 	eor.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	68b8      	ldr	r0, [r7, #8]
 8005b34:	f7ff fda8 	bl	8005688 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005b38:	60b8      	str	r0, [r7, #8]
 8005b3a:	e7e5      	b.n	8005b08 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8005b3c:	68b8      	ldr	r0, [r7, #8]
 8005b3e:	f7ff fd98 	bl	8005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005b42:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8005b44:	e7e0      	b.n	8005b08 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8005b46:	f107 0314 	add.w	r3, r7, #20
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fe13 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 8005b52:	697b      	ldr	r3, [r7, #20]
    }
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKchEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f996 	bl	8005e96 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKchEE7_M_addrEv>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKchEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fdeb 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3310      	adds	r3, #16
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f945 	bl	8005e70 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f950 	bl	8005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b08b      	sub	sp, #44	; 0x2c
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8005c28:	68b8      	ldr	r0, [r7, #8]
 8005c2a:	f7ff fbe2 	bl	80053f2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8005c32:	68b8      	ldr	r0, [r7, #8]
 8005c34:	f7ff ff56 	bl	8005ae4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8005c4c:	68bc      	ldr	r4, [r7, #8]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f90d 	bl	8005e70 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7ff fc53 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fd08 	bl	8005688 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	e004      	b.n	8005c86 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fcf7 	bl	8005672 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005c84:	4603      	mov	r3, r0
 8005c86:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005c88:	e7db      	b.n	8005c42 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fd70 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01d      	beq.n	8005cdc <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8005ca0:	68b8      	ldr	r0, [r7, #8]
 8005ca2:	f000 f90c 	bl	8005ebe <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE5beginEv>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	f107 021c 	add.w	r2, r7, #28
 8005cae:	f107 0310 	add.w	r3, r7, #16
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fbf9 	bl	80054ac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKchEES5_>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8005cc0:	f107 0214 	add.w	r2, r7, #20
 8005cc4:	f107 0318 	add.w	r3, r7, #24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f908 	bl	8005ee0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKchEERS1_Lb1EEEOT_OT0_>
 8005cd0:	e025      	b.n	8005d1e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f849 	bl	8005d6e <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005cdc:	68bc      	ldr	r4, [r7, #8]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff79 	bl	8005bd8 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff fc0b 	bl	8005508 <_ZNKSt4lessIcEclERKcS2_>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8005cf8:	f107 0214 	add.w	r2, r7, #20
 8005cfc:	f107 0318 	add.w	r3, r7, #24
 8005d00:	4619      	mov	r1, r3
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8ec 	bl	8005ee0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKchEERS1_Lb1EEEOT_OT0_>
 8005d08:	e009      	b.n	8005d1e <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	f107 0220 	add.w	r2, r7, #32
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	4619      	mov	r1, r3
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f84a 	bl	8005db2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	372c      	adds	r7, #44	; 0x2c
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}

08005d26 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	330c      	adds	r3, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f000 f8ae 	bl	8005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8a7 	bl	8005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fdf6 	bl	800796c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8005d80:	4602      	mov	r2, r0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	return *this;
 8005d86:	687b      	ldr	r3, [r7, #4]
      }
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 fde3 	bl	8007968 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]
	return *this;
 8005da8:	687b      	ldr	r3, [r7, #4]
      }
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f000 f873 	bl	8005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <_ZNKSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 8005dde:	b590      	push	{r4, r7, lr}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681c      	ldr	r4, [r3, #0]
 8005dec:	6838      	ldr	r0, [r7, #0]
 8005dee:	f7ff fdff 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005df2:	4603      	mov	r3, r0
 8005df4:	4619      	mov	r1, r3
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 f88b 	bl	8005f12 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}

08005e06 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f000 f88b 	bl	8005f40 <_ZSt10destroy_atISt4pairIKchEEvPT_>
	}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b088      	sub	sp, #32
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005e4a:	f7fb fb87 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f001 fd17 	bl	8007888 <_ZdlPv>
	    return;
 8005e5a:	e005      	b.n	8005e68 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	69f8      	ldr	r0, [r7, #28]
 8005e62:	f000 f8bf 	bl	8005fe4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f86a 	bl	8005f52 <_ZNKSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fda7 	bl	80059da <_ZNKSt10_Select1stISt4pairIKchEEclERKS2_>
 8005e8c:	4603      	mov	r3, r0
      }
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKchEE7_M_addrEv>:
      _M_addr() noexcept
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	f107 030c 	add.w	r3, r7, #12
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fc51 	bl	8005778 <_ZNSt17_Rb_tree_iteratorISt4pairIKchEEC1EPSt18_Rb_tree_node_base>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKchEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005eec:	68b8      	ldr	r0, [r7, #8]
 8005eee:	f000 f83e 	bl	8005f6e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKchEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ffd5 	bl	8005eaa <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005f00:	4603      	mov	r3, r0
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f830 	bl	8005f82 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_get_nodeEv>
 8005f22:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005f24:	6838      	ldr	r0, [r7, #0]
 8005f26:	f7ff fd63 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f837 	bl	8005fa4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8005f36:	68fb      	ldr	r3, [r7, #12]
	}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <_ZSt10destroy_atISt4pairIKchEEvPT_>:
    destroy_at(_Tp* __location)
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
    }
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <_ZNKSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>:
      _M_valptr() const
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f852 	bl	8006008 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKchEE6_M_ptrEv>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKchEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff3b 	bl	8005e06 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2101      	movs	r1, #1
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f843 	bl	8006020 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE8allocateERS5_j>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005fa4:	b5b0      	push	{r4, r5, r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	2014      	movs	r0, #20
 8005fb6:	f7fb fad8 	bl	800156a <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff ff23 	bl	8005e06 <_ZNSt8_Rb_treeIcSt4pairIKchESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv>
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	68b8      	ldr	r0, [r7, #8]
 8005fc4:	f7ff fb9d 	bl	8005702 <_ZNSt13_Rb_tree_nodeISt4pairIKchEE9_M_valptrEv>
 8005fc8:	4605      	mov	r5, r0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fd10 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 f85d 	bl	8006096 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdb0      	pop	{r4, r5, r7, pc}

08005fe4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68b8      	ldr	r0, [r7, #8]
 8005ffe:	f001 fc45 	bl	800788c <_ZdlPvj>
      }
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKchEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f852 	bl	80060ba <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKchEE7_M_addrEv>
 8006016:	4603      	mov	r3, r0
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006032:	f7fb fa93 	bl	800155c <_ZSt21is_constant_evaluatedv>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fc22 	bl	8007890 <_Znwj>
 800604c:	4603      	mov	r3, r0
 800604e:	e006      	b.n	800605e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006050:	2200      	movs	r2, #0
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f83a 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE8allocateEjPKv>
 800605a:	4603      	mov	r3, r0
 800605c:	bf00      	nop
      { return __a.allocate(__n); }
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <_ZSt12construct_atISt4pairIKchEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006066:	b590      	push	{r4, r7, lr}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006070:	6838      	ldr	r0, [r7, #0]
 8006072:	f7ff fcbd 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006076:	4604      	mov	r4, r0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4619      	mov	r1, r3
 800607c:	2002      	movs	r0, #2
 800607e:	f7fb fa74 	bl	800156a <_ZnwjPv>
 8006082:	4601      	mov	r1, r0
 8006084:	460a      	mov	r2, r1
 8006086:	4623      	mov	r3, r4
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	8013      	strh	r3, [r2, #0]
 800608c:	460b      	mov	r3, r1
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}

08006096 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKchEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fca4 	bl	80059f0 <_ZSt7forwardIRKSt4pairIKchEEOT_RNSt16remove_referenceIS5_E4typeE>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4619      	mov	r1, r3
 80060ac:	68b8      	ldr	r0, [r7, #8]
 80060ae:	f7ff ffda 	bl	8006066 <_ZSt12construct_atISt4pairIKchEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKchEE7_M_addrEv>:
      _M_addr() const noexcept
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f81a 	bl	8006114 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE11_M_max_sizeEv>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bf8c      	ite	hi
 80060e8:	2301      	movhi	r3, #1
 80060ea:	2300      	movls	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80060f2:	f001 fc98 	bl	8007a26 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fbc5 	bl	8007890 <_Znwj>
 8006106:	4603      	mov	r3, r0
 8006108:	bf00      	nop
      }
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKchEEE11_M_max_sizeEv+0x14>)
      }
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	06666666 	.word	0x06666666

0800612c <_ZN5TIMERC1EP17TIM_HandleTypeDef>:
#include "Timing.hpp"

TIMER::TIMER(TIM_HandleTypeDef* tim) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	_tim = tim;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(_tim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 ffa3 	bl	800708c <HAL_TIM_Base_Start>
}
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZN5TIMER7delayUSEt>:

void TIMER::delayUS(uint16_t us) {
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
	//__disable_irq();
	_tim->Instance->CNT = 0;			//Set Timer value to 0, the Timer ticks every microsecond and counts up
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
	while(_tim->Instance->CNT < us);	//Wait till the set delay time is elapsed
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616e:	887b      	ldrh	r3, [r7, #2]
 8006170:	429a      	cmp	r2, r3
 8006172:	bf34      	ite	cc
 8006174:	2301      	movcc	r3, #1
 8006176:	2300      	movcs	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d000      	beq.n	8006180 <_ZN5TIMER7delayUSEt+0x30>
 800617e:	e7f2      	b.n	8006166 <_ZN5TIMER7delayUSEt+0x16>
	//__enable_irq();
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr
	...

0800618c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006190:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <HAL_Init+0x28>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <HAL_Init+0x28>)
 8006196:	f043 0310 	orr.w	r3, r3, #16
 800619a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800619c:	2003      	movs	r0, #3
 800619e:	f000 f947 	bl	8006430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061a2:	200f      	movs	r0, #15
 80061a4:	f000 f808 	bl	80061b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061a8:	f7fb f87e 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40022000 	.word	0x40022000

080061b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061c0:	4b12      	ldr	r3, [pc, #72]	; (800620c <HAL_InitTick+0x54>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b12      	ldr	r3, [pc, #72]	; (8006210 <HAL_InitTick+0x58>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f95f 	bl	800649a <HAL_SYSTICK_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e00e      	b.n	8006204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b0f      	cmp	r3, #15
 80061ea:	d80a      	bhi.n	8006202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061ec:	2200      	movs	r2, #0
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	f000 f927 	bl	8006446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <HAL_InitTick+0x5c>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e000      	b.n	8006204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000000 	.word	0x20000000
 8006210:	20000008 	.word	0x20000008
 8006214:	20000004 	.word	0x20000004

08006218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_IncTick+0x1c>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_IncTick+0x20>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4413      	add	r3, r2
 8006228:	4a03      	ldr	r2, [pc, #12]	; (8006238 <HAL_IncTick+0x20>)
 800622a:	6013      	str	r3, [r2, #0]
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	20000008 	.word	0x20000008
 8006238:	20000128 	.word	0x20000128

0800623c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return uwTick;
 8006240:	4b02      	ldr	r3, [pc, #8]	; (800624c <HAL_GetTick+0x10>)
 8006242:	681b      	ldr	r3, [r3, #0]
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	20000128 	.word	0x20000128

08006250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006258:	f7ff fff0 	bl	800623c <HAL_GetTick>
 800625c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d005      	beq.n	8006276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_Delay+0x44>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006276:	bf00      	nop
 8006278:	f7ff ffe0 	bl	800623c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d8f7      	bhi.n	8006278 <HAL_Delay+0x28>
  {
  }
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000008 	.word	0x20000008

08006298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <__NVIC_SetPriorityGrouping+0x44>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <__NVIC_SetPriorityGrouping+0x44>)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	60d3      	str	r3, [r2, #12]
}
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	e000ed00 	.word	0xe000ed00

080062e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <__NVIC_GetPriorityGrouping+0x18>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	f003 0307 	and.w	r3, r3, #7
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	2b00      	cmp	r3, #0
 800630c:	db0b      	blt.n	8006326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	f003 021f 	and.w	r2, r3, #31
 8006314:	4906      	ldr	r1, [pc, #24]	; (8006330 <__NVIC_EnableIRQ+0x34>)
 8006316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2001      	movs	r0, #1
 800631e:	fa00 f202 	lsl.w	r2, r0, r2
 8006322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr
 8006330:	e000e100 	.word	0xe000e100

08006334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006344:	2b00      	cmp	r3, #0
 8006346:	db0a      	blt.n	800635e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	490c      	ldr	r1, [pc, #48]	; (8006380 <__NVIC_SetPriority+0x4c>)
 800634e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006352:	0112      	lsls	r2, r2, #4
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	440b      	add	r3, r1
 8006358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800635c:	e00a      	b.n	8006374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	4908      	ldr	r1, [pc, #32]	; (8006384 <__NVIC_SetPriority+0x50>)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	3b04      	subs	r3, #4
 800636c:	0112      	lsls	r2, r2, #4
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	440b      	add	r3, r1
 8006372:	761a      	strb	r2, [r3, #24]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000e100 	.word	0xe000e100
 8006384:	e000ed00 	.word	0xe000ed00

08006388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006388:	b480      	push	{r7}
 800638a:	b089      	sub	sp, #36	; 0x24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f1c3 0307 	rsb	r3, r3, #7
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	bf28      	it	cs
 80063a6:	2304      	movcs	r3, #4
 80063a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d902      	bls.n	80063b8 <NVIC_EncodePriority+0x30>
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3b03      	subs	r3, #3
 80063b6:	e000      	b.n	80063ba <NVIC_EncodePriority+0x32>
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43da      	mvns	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	401a      	ands	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063d0:	f04f 31ff 	mov.w	r1, #4294967295
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	43d9      	mvns	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063e0:	4313      	orrs	r3, r2
         );
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3724      	adds	r7, #36	; 0x24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063fc:	d301      	bcc.n	8006402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063fe:	2301      	movs	r3, #1
 8006400:	e00f      	b.n	8006422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <SysTick_Config+0x40>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3b01      	subs	r3, #1
 8006408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800640a:	210f      	movs	r1, #15
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	f7ff ff90 	bl	8006334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <SysTick_Config+0x40>)
 8006416:	2200      	movs	r2, #0
 8006418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800641a:	4b04      	ldr	r3, [pc, #16]	; (800642c <SysTick_Config+0x40>)
 800641c:	2207      	movs	r2, #7
 800641e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	e000e010 	.word	0xe000e010

08006430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff ff2d 	bl	8006298 <__NVIC_SetPriorityGrouping>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	4603      	mov	r3, r0
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006458:	f7ff ff42 	bl	80062e0 <__NVIC_GetPriorityGrouping>
 800645c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff ff90 	bl	8006388 <NVIC_EncodePriority>
 8006468:	4602      	mov	r2, r0
 800646a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff5f 	bl	8006334 <__NVIC_SetPriority>
}
 8006476:	bf00      	nop
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	4603      	mov	r3, r0
 8006486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff ff35 	bl	80062fc <__NVIC_EnableIRQ>
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ffa2 	bl	80063ec <SysTick_Config>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b08b      	sub	sp, #44	; 0x2c
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064c6:	e169      	b.n	800679c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064c8:	2201      	movs	r2, #1
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f040 8158 	bne.w	8006796 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	4a9a      	ldr	r2, [pc, #616]	; (8006754 <HAL_GPIO_Init+0x2a0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 80064f0:	4a98      	ldr	r2, [pc, #608]	; (8006754 <HAL_GPIO_Init+0x2a0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d875      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 80064f6:	4a98      	ldr	r2, [pc, #608]	; (8006758 <HAL_GPIO_Init+0x2a4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d058      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 80064fc:	4a96      	ldr	r2, [pc, #600]	; (8006758 <HAL_GPIO_Init+0x2a4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d86f      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 8006502:	4a96      	ldr	r2, [pc, #600]	; (800675c <HAL_GPIO_Init+0x2a8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d052      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006508:	4a94      	ldr	r2, [pc, #592]	; (800675c <HAL_GPIO_Init+0x2a8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d869      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800650e:	4a94      	ldr	r2, [pc, #592]	; (8006760 <HAL_GPIO_Init+0x2ac>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04c      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006514:	4a92      	ldr	r2, [pc, #584]	; (8006760 <HAL_GPIO_Init+0x2ac>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d863      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800651a:	4a92      	ldr	r2, [pc, #584]	; (8006764 <HAL_GPIO_Init+0x2b0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d046      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006520:	4a90      	ldr	r2, [pc, #576]	; (8006764 <HAL_GPIO_Init+0x2b0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d85d      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 8006526:	2b12      	cmp	r3, #18
 8006528:	d82a      	bhi.n	8006580 <HAL_GPIO_Init+0xcc>
 800652a:	2b12      	cmp	r3, #18
 800652c:	d859      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_GPIO_Init+0x80>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	080065af 	.word	0x080065af
 8006538:	08006589 	.word	0x08006589
 800653c:	0800659b 	.word	0x0800659b
 8006540:	080065dd 	.word	0x080065dd
 8006544:	080065e3 	.word	0x080065e3
 8006548:	080065e3 	.word	0x080065e3
 800654c:	080065e3 	.word	0x080065e3
 8006550:	080065e3 	.word	0x080065e3
 8006554:	080065e3 	.word	0x080065e3
 8006558:	080065e3 	.word	0x080065e3
 800655c:	080065e3 	.word	0x080065e3
 8006560:	080065e3 	.word	0x080065e3
 8006564:	080065e3 	.word	0x080065e3
 8006568:	080065e3 	.word	0x080065e3
 800656c:	080065e3 	.word	0x080065e3
 8006570:	080065e3 	.word	0x080065e3
 8006574:	080065e3 	.word	0x080065e3
 8006578:	08006591 	.word	0x08006591
 800657c:	080065a5 	.word	0x080065a5
 8006580:	4a79      	ldr	r2, [pc, #484]	; (8006768 <HAL_GPIO_Init+0x2b4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006586:	e02c      	b.n	80065e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	623b      	str	r3, [r7, #32]
          break;
 800658e:	e029      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	623b      	str	r3, [r7, #32]
          break;
 8006598:	e024      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	3308      	adds	r3, #8
 80065a0:	623b      	str	r3, [r7, #32]
          break;
 80065a2:	e01f      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	330c      	adds	r3, #12
 80065aa:	623b      	str	r3, [r7, #32]
          break;
 80065ac:	e01a      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065b6:	2304      	movs	r3, #4
 80065b8:	623b      	str	r3, [r7, #32]
          break;
 80065ba:	e013      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d105      	bne.n	80065d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065c4:	2308      	movs	r3, #8
 80065c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	611a      	str	r2, [r3, #16]
          break;
 80065ce:	e009      	b.n	80065e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065d0:	2308      	movs	r3, #8
 80065d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	615a      	str	r2, [r3, #20]
          break;
 80065da:	e003      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
          break;
 80065e0:	e000      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          break;
 80065e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d801      	bhi.n	80065ee <HAL_GPIO_Init+0x13a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	e001      	b.n	80065f2 <HAL_GPIO_Init+0x13e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d802      	bhi.n	8006600 <HAL_GPIO_Init+0x14c>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	e002      	b.n	8006606 <HAL_GPIO_Init+0x152>
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	3b08      	subs	r3, #8
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	210f      	movs	r1, #15
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	401a      	ands	r2, r3
 8006618:	6a39      	ldr	r1, [r7, #32]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	431a      	orrs	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80b1 	beq.w	8006796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006634:	4b4d      	ldr	r3, [pc, #308]	; (800676c <HAL_GPIO_Init+0x2b8>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	4a4c      	ldr	r2, [pc, #304]	; (800676c <HAL_GPIO_Init+0x2b8>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6193      	str	r3, [r2, #24]
 8006640:	4b4a      	ldr	r3, [pc, #296]	; (800676c <HAL_GPIO_Init+0x2b8>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800664c:	4a48      	ldr	r2, [pc, #288]	; (8006770 <HAL_GPIO_Init+0x2bc>)
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3302      	adds	r3, #2
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	220f      	movs	r2, #15
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a40      	ldr	r2, [pc, #256]	; (8006774 <HAL_GPIO_Init+0x2c0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_GPIO_Init+0x1ec>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3f      	ldr	r2, [pc, #252]	; (8006778 <HAL_GPIO_Init+0x2c4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00d      	beq.n	800669c <HAL_GPIO_Init+0x1e8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_GPIO_Init+0x2c8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <HAL_GPIO_Init+0x1e4>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3d      	ldr	r2, [pc, #244]	; (8006780 <HAL_GPIO_Init+0x2cc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d101      	bne.n	8006694 <HAL_GPIO_Init+0x1e0>
 8006690:	2303      	movs	r3, #3
 8006692:	e006      	b.n	80066a2 <HAL_GPIO_Init+0x1ee>
 8006694:	2304      	movs	r3, #4
 8006696:	e004      	b.n	80066a2 <HAL_GPIO_Init+0x1ee>
 8006698:	2302      	movs	r3, #2
 800669a:	e002      	b.n	80066a2 <HAL_GPIO_Init+0x1ee>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_GPIO_Init+0x1ee>
 80066a0:	2300      	movs	r3, #0
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	f002 0203 	and.w	r2, r2, #3
 80066a8:	0092      	lsls	r2, r2, #2
 80066aa:	4093      	lsls	r3, r2
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066b2:	492f      	ldr	r1, [pc, #188]	; (8006770 <HAL_GPIO_Init+0x2bc>)
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	3302      	adds	r3, #2
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	492c      	ldr	r1, [pc, #176]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]
 80066d8:	e006      	b.n	80066e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80066da:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	4928      	ldr	r1, [pc, #160]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80066f4:	4b23      	ldr	r3, [pc, #140]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4922      	ldr	r1, [pc, #136]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
 8006700:	e006      	b.n	8006710 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	43db      	mvns	r3, r3
 800670a:	491e      	ldr	r1, [pc, #120]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 800670c:	4013      	ands	r3, r2
 800670e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	4918      	ldr	r1, [pc, #96]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4313      	orrs	r3, r2
 8006726:	608b      	str	r3, [r1, #8]
 8006728:	e006      	b.n	8006738 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800672a:	4b16      	ldr	r3, [pc, #88]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	43db      	mvns	r3, r3
 8006732:	4914      	ldr	r1, [pc, #80]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 8006734:	4013      	ands	r3, r2
 8006736:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d021      	beq.n	8006788 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006744:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	490e      	ldr	r1, [pc, #56]	; (8006784 <HAL_GPIO_Init+0x2d0>)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4313      	orrs	r3, r2
 800674e:	60cb      	str	r3, [r1, #12]
 8006750:	e021      	b.n	8006796 <HAL_GPIO_Init+0x2e2>
 8006752:	bf00      	nop
 8006754:	10320000 	.word	0x10320000
 8006758:	10310000 	.word	0x10310000
 800675c:	10220000 	.word	0x10220000
 8006760:	10210000 	.word	0x10210000
 8006764:	10120000 	.word	0x10120000
 8006768:	10110000 	.word	0x10110000
 800676c:	40021000 	.word	0x40021000
 8006770:	40010000 	.word	0x40010000
 8006774:	40010800 	.word	0x40010800
 8006778:	40010c00 	.word	0x40010c00
 800677c:	40011000 	.word	0x40011000
 8006780:	40011400 	.word	0x40011400
 8006784:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <HAL_GPIO_Init+0x304>)
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	43db      	mvns	r3, r3
 8006790:	4909      	ldr	r1, [pc, #36]	; (80067b8 <HAL_GPIO_Init+0x304>)
 8006792:	4013      	ands	r3, r2
 8006794:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	fa22 f303 	lsr.w	r3, r2, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f47f ae8e 	bne.w	80064c8 <HAL_GPIO_Init+0x14>
  }
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	372c      	adds	r7, #44	; 0x2c
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	40010400 	.word	0x40010400

080067bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	887b      	ldrh	r3, [r7, #2]
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e001      	b.n	80067de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	807b      	strh	r3, [r7, #2]
 80067f6:	4613      	mov	r3, r2
 80067f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067fa:	787b      	ldrb	r3, [r7, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006800:	887a      	ldrh	r2, [r7, #2]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006806:	e003      	b.n	8006810 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	041a      	lsls	r2, r3, #16
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	611a      	str	r2, [r3, #16]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
	...

0800681c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e272      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8087 	beq.w	800694a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800683c:	4b92      	ldr	r3, [pc, #584]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 030c 	and.w	r3, r3, #12
 8006844:	2b04      	cmp	r3, #4
 8006846:	d00c      	beq.n	8006862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006848:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b08      	cmp	r3, #8
 8006852:	d112      	bne.n	800687a <HAL_RCC_OscConfig+0x5e>
 8006854:	4b8c      	ldr	r3, [pc, #560]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d10b      	bne.n	800687a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006862:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d06c      	beq.n	8006948 <HAL_RCC_OscConfig+0x12c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d168      	bne.n	8006948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e24c      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006882:	d106      	bne.n	8006892 <HAL_RCC_OscConfig+0x76>
 8006884:	4b80      	ldr	r3, [pc, #512]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7f      	ldr	r2, [pc, #508]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800688a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e02e      	b.n	80068f0 <HAL_RCC_OscConfig+0xd4>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x98>
 800689a:	4b7b      	ldr	r3, [pc, #492]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b78      	ldr	r3, [pc, #480]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a77      	ldr	r2, [pc, #476]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e01d      	b.n	80068f0 <HAL_RCC_OscConfig+0xd4>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCC_OscConfig+0xbc>
 80068be:	4b72      	ldr	r3, [pc, #456]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	4b6f      	ldr	r3, [pc, #444]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a6e      	ldr	r2, [pc, #440]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e00b      	b.n	80068f0 <HAL_RCC_OscConfig+0xd4>
 80068d8:	4b6b      	ldr	r3, [pc, #428]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6a      	ldr	r2, [pc, #424]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	4b68      	ldr	r3, [pc, #416]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a67      	ldr	r2, [pc, #412]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80068ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7ff fca0 	bl	800623c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006900:	f7ff fc9c 	bl	800623c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	; 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e200      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	4b5d      	ldr	r3, [pc, #372]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0xe4>
 800691e:	e014      	b.n	800694a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006920:	f7ff fc8c 	bl	800623c <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006928:	f7ff fc88 	bl	800623c <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	; 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e1ec      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693a:	4b53      	ldr	r3, [pc, #332]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x10c>
 8006946:	e000      	b.n	800694a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d063      	beq.n	8006a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006956:	4b4c      	ldr	r3, [pc, #304]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006962:	4b49      	ldr	r3, [pc, #292]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	2b08      	cmp	r3, #8
 800696c:	d11c      	bne.n	80069a8 <HAL_RCC_OscConfig+0x18c>
 800696e:	4b46      	ldr	r3, [pc, #280]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d116      	bne.n	80069a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697a:	4b43      	ldr	r3, [pc, #268]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_RCC_OscConfig+0x176>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d001      	beq.n	8006992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e1c0      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006992:	4b3d      	ldr	r3, [pc, #244]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	4939      	ldr	r1, [pc, #228]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a6:	e03a      	b.n	8006a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d020      	beq.n	80069f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069b0:	4b36      	ldr	r3, [pc, #216]	; (8006a8c <HAL_RCC_OscConfig+0x270>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b6:	f7ff fc41 	bl	800623c <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069be:	f7ff fc3d 	bl	800623c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e1a1      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d0:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0f0      	beq.n	80069be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4927      	ldr	r1, [pc, #156]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	600b      	str	r3, [r1, #0]
 80069f0:	e015      	b.n	8006a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069f2:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <HAL_RCC_OscConfig+0x270>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f8:	f7ff fc20 	bl	800623c <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a00:	f7ff fc1c 	bl	800623c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e180      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03a      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d019      	beq.n	8006a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <HAL_RCC_OscConfig+0x274>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a38:	f7ff fc00 	bl	800623c <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a40:	f7ff fbfc 	bl	800623c <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e160      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <HAL_RCC_OscConfig+0x26c>)
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a5e:	2001      	movs	r0, #1
 8006a60:	f000 faa6 	bl	8006fb0 <RCC_Delay>
 8006a64:	e01c      	b.n	8006aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_RCC_OscConfig+0x274>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a6c:	f7ff fbe6 	bl	800623c <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a72:	e00f      	b.n	8006a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a74:	f7ff fbe2 	bl	800623c <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d908      	bls.n	8006a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e146      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	42420000 	.word	0x42420000
 8006a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a94:	4b92      	ldr	r3, [pc, #584]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e9      	bne.n	8006a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a6 	beq.w	8006bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ab2:	4b8b      	ldr	r3, [pc, #556]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10d      	bne.n	8006ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	4b88      	ldr	r3, [pc, #544]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4a87      	ldr	r2, [pc, #540]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	61d3      	str	r3, [r2, #28]
 8006aca:	4b85      	ldr	r3, [pc, #532]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ada:	4b82      	ldr	r3, [pc, #520]	; (8006ce4 <HAL_RCC_OscConfig+0x4c8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d118      	bne.n	8006b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ae6:	4b7f      	ldr	r3, [pc, #508]	; (8006ce4 <HAL_RCC_OscConfig+0x4c8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a7e      	ldr	r2, [pc, #504]	; (8006ce4 <HAL_RCC_OscConfig+0x4c8>)
 8006aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006af2:	f7ff fba3 	bl	800623c <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006afa:	f7ff fb9f 	bl	800623c <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b64      	cmp	r3, #100	; 0x64
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e103      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0c:	4b75      	ldr	r3, [pc, #468]	; (8006ce4 <HAL_RCC_OscConfig+0x4c8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0f0      	beq.n	8006afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCC_OscConfig+0x312>
 8006b20:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	4a6e      	ldr	r2, [pc, #440]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	6213      	str	r3, [r2, #32]
 8006b2c:	e02d      	b.n	8006b8a <HAL_RCC_OscConfig+0x36e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10c      	bne.n	8006b50 <HAL_RCC_OscConfig+0x334>
 8006b36:	4b6a      	ldr	r3, [pc, #424]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	4a69      	ldr	r2, [pc, #420]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	6213      	str	r3, [r2, #32]
 8006b42:	4b67      	ldr	r3, [pc, #412]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	4a66      	ldr	r2, [pc, #408]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	6213      	str	r3, [r2, #32]
 8006b4e:	e01c      	b.n	8006b8a <HAL_RCC_OscConfig+0x36e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	d10c      	bne.n	8006b72 <HAL_RCC_OscConfig+0x356>
 8006b58:	4b61      	ldr	r3, [pc, #388]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	4a60      	ldr	r2, [pc, #384]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b5e:	f043 0304 	orr.w	r3, r3, #4
 8006b62:	6213      	str	r3, [r2, #32]
 8006b64:	4b5e      	ldr	r3, [pc, #376]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	4a5d      	ldr	r2, [pc, #372]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	6213      	str	r3, [r2, #32]
 8006b70:	e00b      	b.n	8006b8a <HAL_RCC_OscConfig+0x36e>
 8006b72:	4b5b      	ldr	r3, [pc, #364]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	4a5a      	ldr	r2, [pc, #360]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	6213      	str	r3, [r2, #32]
 8006b7e:	4b58      	ldr	r3, [pc, #352]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	4a57      	ldr	r2, [pc, #348]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	f023 0304 	bic.w	r3, r3, #4
 8006b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d015      	beq.n	8006bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b92:	f7ff fb53 	bl	800623c <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9a:	f7ff fb4f 	bl	800623c <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e0b1      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb0:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0ee      	beq.n	8006b9a <HAL_RCC_OscConfig+0x37e>
 8006bbc:	e014      	b.n	8006be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bbe:	f7ff fb3d 	bl	800623c <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc4:	e00a      	b.n	8006bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc6:	f7ff fb39 	bl	800623c <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e09b      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bdc:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ee      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bee:	4b3c      	ldr	r3, [pc, #240]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8087 	beq.w	8006d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c04:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 030c 	and.w	r3, r3, #12
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d061      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d146      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c18:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <HAL_RCC_OscConfig+0x4cc>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7ff fb0d 	bl	800623c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c26:	f7ff fb09 	bl	800623c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e06d      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c38:	4b29      	ldr	r3, [pc, #164]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1f0      	bne.n	8006c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	4921      	ldr	r1, [pc, #132]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a19      	ldr	r1, [r3, #32]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	430b      	orrs	r3, r1
 8006c72:	491b      	ldr	r1, [pc, #108]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7ff fadd 	bl	800623c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c86:	f7ff fad9 	bl	800623c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e03d      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c98:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f0      	beq.n	8006c86 <HAL_RCC_OscConfig+0x46a>
 8006ca4:	e035      	b.n	8006d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7ff fac6 	bl	800623c <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb4:	f7ff fac2 	bl	800623c <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e026      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <HAL_RCC_OscConfig+0x4c4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x498>
 8006cd2:	e01e      	b.n	8006d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d107      	bne.n	8006cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e019      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	40007000 	.word	0x40007000
 8006ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_OscConfig+0x500>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d001      	beq.n	8006d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40021000 	.word	0x40021000

08006d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0d0      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b6a      	ldr	r3, [pc, #424]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d910      	bls.n	8006d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b67      	ldr	r3, [pc, #412]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 0207 	bic.w	r2, r3, #7
 8006d4a:	4965      	ldr	r1, [pc, #404]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b63      	ldr	r3, [pc, #396]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0b8      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d020      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d7c:	4b59      	ldr	r3, [pc, #356]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a58      	ldr	r2, [pc, #352]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d94:	4b53      	ldr	r3, [pc, #332]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a52      	ldr	r2, [pc, #328]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da0:	4b50      	ldr	r3, [pc, #320]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	494d      	ldr	r1, [pc, #308]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d040      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc6:	4b47      	ldr	r3, [pc, #284]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d115      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e07f      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d107      	bne.n	8006dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dde:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e073      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dee:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e06b      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dfe:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f023 0203 	bic.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4936      	ldr	r1, [pc, #216]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e10:	f7ff fa14 	bl	800623c <HAL_GetTick>
 8006e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e18:	f7ff fa10 	bl	800623c <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e053      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f003 020c 	and.w	r2, r3, #12
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d1eb      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d210      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 0207 	bic.w	r2, r3, #7
 8006e56:	4922      	ldr	r1, [pc, #136]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e032      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	4916      	ldr	r1, [pc, #88]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d009      	beq.n	8006eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e9a:	4b12      	ldr	r3, [pc, #72]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	490e      	ldr	r1, [pc, #56]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eae:	f000 f821 	bl	8006ef4 <HAL_RCC_GetSysClockFreq>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	490a      	ldr	r1, [pc, #40]	; (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec0:	5ccb      	ldrb	r3, [r1, r3]
 8006ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec6:	4a09      	ldr	r2, [pc, #36]	; (8006eec <HAL_RCC_ClockConfig+0x1cc>)
 8006ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff f972 	bl	80061b8 <HAL_InitTick>

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40022000 	.word	0x40022000
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	080080f8 	.word	0x080080f8
 8006eec:	20000000 	.word	0x20000000
 8006ef0:	20000004 	.word	0x20000004

08006ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ef4:	b490      	push	{r4, r7}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006efa:	4b29      	ldr	r3, [pc, #164]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006efc:	1d3c      	adds	r4, r7, #4
 8006efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f04:	f240 2301 	movw	r3, #513	; 0x201
 8006f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d002      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0x40>
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d003      	beq.n	8006f3a <HAL_RCC_GetSysClockFreq+0x46>
 8006f32:	e02b      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f34:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f36:	623b      	str	r3, [r7, #32]
      break;
 8006f38:	e02b      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	0c9b      	lsrs	r3, r3, #18
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	3328      	adds	r3, #40	; 0x28
 8006f44:	443b      	add	r3, r7
 8006f46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d012      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	0c5b      	lsrs	r3, r3, #17
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	3328      	adds	r3, #40	; 0x28
 8006f62:	443b      	add	r3, r7
 8006f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4a0e      	ldr	r2, [pc, #56]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f6e:	fb03 f202 	mul.w	r2, r3, r2
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7a:	e004      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f80:	fb02 f303 	mul.w	r3, r2, r3
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	623b      	str	r3, [r7, #32]
      break;
 8006f8a:	e002      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f8e:	623b      	str	r3, [r7, #32]
      break;
 8006f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc90      	pop	{r4, r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	080080e8 	.word	0x080080e8
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	007a1200 	.word	0x007a1200
 8006fac:	003d0900 	.word	0x003d0900

08006fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <RCC_Delay+0x34>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <RCC_Delay+0x38>)
 8006fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc2:	0a5b      	lsrs	r3, r3, #9
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fcc:	bf00      	nop
  }
  while (Delay --);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	60fa      	str	r2, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f9      	bne.n	8006fcc <RCC_Delay+0x1c>
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	20000000 	.word	0x20000000
 8006fe8:	10624dd3 	.word	0x10624dd3

08006fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e041      	b.n	8007082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fa f97a 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f000 fac4 	bl	80075b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d001      	beq.n	80070a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e032      	b.n	800710a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a18      	ldr	r2, [pc, #96]	; (8007114 <HAL_TIM_Base_Start+0x88>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00e      	beq.n	80070d4 <HAL_TIM_Base_Start+0x48>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070be:	d009      	beq.n	80070d4 <HAL_TIM_Base_Start+0x48>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a14      	ldr	r2, [pc, #80]	; (8007118 <HAL_TIM_Base_Start+0x8c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d004      	beq.n	80070d4 <HAL_TIM_Base_Start+0x48>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a13      	ldr	r2, [pc, #76]	; (800711c <HAL_TIM_Base_Start+0x90>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d111      	bne.n	80070f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d010      	beq.n	8007108 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0201 	orr.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f6:	e007      	b.n	8007108 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800

08007120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d001      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e03a      	b.n	80071ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <HAL_TIM_Base_Start_IT+0x98>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00e      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x58>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007162:	d009      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x58>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a14      	ldr	r2, [pc, #80]	; (80071bc <HAL_TIM_Base_Start_IT+0x9c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x58>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d111      	bne.n	800719c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b06      	cmp	r3, #6
 8007188:	d010      	beq.n	80071ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0201 	orr.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719a:	e007      	b.n	80071ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800

080071c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0202 	mvn.w	r2, #2
 80071f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f9ba 	bl	8007580 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9ad 	bl	800756e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9bc 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b04      	cmp	r3, #4
 800722c:	d122      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d11b      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0204 	mvn.w	r2, #4
 8007244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f990 	bl	8007580 <HAL_TIM_IC_CaptureCallback>
 8007260:	e005      	b.n	800726e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f983 	bl	800756e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f992 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b08      	cmp	r3, #8
 8007280:	d122      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d11b      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0208 	mvn.w	r2, #8
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f966 	bl	8007580 <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f959 	bl	800756e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f968 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d122      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d11b      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0210 	mvn.w	r2, #16
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f93c 	bl	8007580 <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f92f 	bl	800756e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f93e 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0201 	mvn.w	r2, #1
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f90a 	bl	800755c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d107      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa81 	bl	8007876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d10e      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d107      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f902 	bl	80075a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0220 	mvn.w	r2, #32
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa4c 	bl	8007864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_TIM_ConfigClockSource+0x18>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e0b3      	b.n	8007554 <HAL_TIM_ConfigClockSource+0x180>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800740a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007424:	d03e      	beq.n	80074a4 <HAL_TIM_ConfigClockSource+0xd0>
 8007426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742a:	f200 8087 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x168>
 800742e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007432:	f000 8085 	beq.w	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743a:	d87f      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 800743c:	2b70      	cmp	r3, #112	; 0x70
 800743e:	d01a      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0xa2>
 8007440:	2b70      	cmp	r3, #112	; 0x70
 8007442:	d87b      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 8007444:	2b60      	cmp	r3, #96	; 0x60
 8007446:	d050      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x116>
 8007448:	2b60      	cmp	r3, #96	; 0x60
 800744a:	d877      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 800744c:	2b50      	cmp	r3, #80	; 0x50
 800744e:	d03c      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0xf6>
 8007450:	2b50      	cmp	r3, #80	; 0x50
 8007452:	d873      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 8007454:	2b40      	cmp	r3, #64	; 0x40
 8007456:	d058      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x136>
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d86f      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 800745c:	2b30      	cmp	r3, #48	; 0x30
 800745e:	d064      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x156>
 8007460:	2b30      	cmp	r3, #48	; 0x30
 8007462:	d86b      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d060      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x156>
 8007468:	2b20      	cmp	r3, #32
 800746a:	d867      	bhi.n	800753c <HAL_TIM_ConfigClockSource+0x168>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d05c      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x156>
 8007470:	2b10      	cmp	r3, #16
 8007472:	d05a      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007474:	e062      	b.n	800753c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6899      	ldr	r1, [r3, #8]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f000 f970 	bl	800776a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007498:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
      break;
 80074a2:	e04e      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	6899      	ldr	r1, [r3, #8]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f000 f959 	bl	800776a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074c6:	609a      	str	r2, [r3, #8]
      break;
 80074c8:	e03b      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6859      	ldr	r1, [r3, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f000 f8d0 	bl	800767c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2150      	movs	r1, #80	; 0x50
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 f927 	bl	8007736 <TIM_ITRx_SetConfig>
      break;
 80074e8:	e02b      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6859      	ldr	r1, [r3, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f000 f8ee 	bl	80076d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2160      	movs	r1, #96	; 0x60
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f917 	bl	8007736 <TIM_ITRx_SetConfig>
      break;
 8007508:	e01b      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6859      	ldr	r1, [r3, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	461a      	mov	r2, r3
 8007518:	f000 f8b0 	bl	800767c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2140      	movs	r1, #64	; 0x40
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f907 	bl	8007736 <TIM_ITRx_SetConfig>
      break;
 8007528:	e00b      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f000 f8fe 	bl	8007736 <TIM_ITRx_SetConfig>
        break;
 800753a:	e002      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800753c:	bf00      	nop
 800753e:	e000      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007540:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr

0800756e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
	...

080075b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a29      	ldr	r2, [pc, #164]	; (8007670 <TIM_Base_SetConfig+0xb8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <TIM_Base_SetConfig+0x30>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d6:	d007      	beq.n	80075e8 <TIM_Base_SetConfig+0x30>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a26      	ldr	r2, [pc, #152]	; (8007674 <TIM_Base_SetConfig+0xbc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_Base_SetConfig+0x30>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a25      	ldr	r2, [pc, #148]	; (8007678 <TIM_Base_SetConfig+0xc0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d108      	bne.n	80075fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <TIM_Base_SetConfig+0xb8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <TIM_Base_SetConfig+0x62>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007608:	d007      	beq.n	800761a <TIM_Base_SetConfig+0x62>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <TIM_Base_SetConfig+0xbc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_Base_SetConfig+0x62>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a18      	ldr	r2, [pc, #96]	; (8007678 <TIM_Base_SetConfig+0xc0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d108      	bne.n	800762c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <TIM_Base_SetConfig+0xb8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d103      	bne.n	8007660 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	615a      	str	r2, [r3, #20]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800

0800767c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 030a 	bic.w	r3, r3, #10
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr

080076d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 0210 	bic.w	r2, r3, #16
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	031b      	lsls	r3, r3, #12
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	f043 0307 	orr.w	r3, r3, #7
 8007758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800776a:	b480      	push	{r7}
 800776c:	b087      	sub	sp, #28
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007784:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	021a      	lsls	r2, r3, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	431a      	orrs	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4313      	orrs	r3, r2
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	609a      	str	r2, [r3, #8]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077bc:	2302      	movs	r3, #2
 80077be:	e046      	b.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a16      	ldr	r2, [pc, #88]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d009      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a12      	ldr	r2, [pc, #72]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a10      	ldr	r2, [pc, #64]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d10c      	bne.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4313      	orrs	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	40012c00 	.word	0x40012c00
 800785c:	40000400 	.word	0x40000400
 8007860:	40000800 	.word	0x40000800

08007864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <_ZdlPv>:
 8007888:	f000 ba42 	b.w	8007d10 <free>

0800788c <_ZdlPvj>:
 800788c:	f7ff bffc 	b.w	8007888 <_ZdlPv>

08007890 <_Znwj>:
 8007890:	2801      	cmp	r0, #1
 8007892:	bf38      	it	cc
 8007894:	2001      	movcc	r0, #1
 8007896:	b510      	push	{r4, lr}
 8007898:	4604      	mov	r4, r0
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fa30 	bl	8007d00 <malloc>
 80078a0:	b930      	cbnz	r0, 80078b0 <_Znwj+0x20>
 80078a2:	f000 f959 	bl	8007b58 <_ZSt15get_new_handlerv>
 80078a6:	b908      	cbnz	r0, 80078ac <_Znwj+0x1c>
 80078a8:	f000 f9f8 	bl	8007c9c <abort>
 80078ac:	4780      	blx	r0
 80078ae:	e7f4      	b.n	800789a <_Znwj+0xa>
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__cxa_pure_virtual>:
 80078b2:	b508      	push	{r3, lr}
 80078b4:	f000 f94a 	bl	8007b4c <_ZSt9terminatev>

080078b8 <_ZNSaIcEC1Ev>:
 80078b8:	4770      	bx	lr

080078ba <_ZNSaIcEC1ERKS_>:
 80078ba:	4770      	bx	lr

080078bc <_ZNSaIcED1Ev>:
 80078bc:	4770      	bx	lr

080078be <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80078be:	68c3      	ldr	r3, [r0, #12]
 80078c0:	b510      	push	{r4, lr}
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	60c2      	str	r2, [r0, #12]
 80078c6:	b102      	cbz	r2, 80078ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80078c8:	6050      	str	r0, [r2, #4]
 80078ca:	6842      	ldr	r2, [r0, #4]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	680c      	ldr	r4, [r1, #0]
 80078d0:	4284      	cmp	r4, r0
 80078d2:	d103      	bne.n	80078dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80078d4:	600b      	str	r3, [r1, #0]
 80078d6:	6098      	str	r0, [r3, #8]
 80078d8:	6043      	str	r3, [r0, #4]
 80078da:	bd10      	pop	{r4, pc}
 80078dc:	6891      	ldr	r1, [r2, #8]
 80078de:	4281      	cmp	r1, r0
 80078e0:	bf0c      	ite	eq
 80078e2:	6093      	streq	r3, [r2, #8]
 80078e4:	60d3      	strne	r3, [r2, #12]
 80078e6:	e7f6      	b.n	80078d6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080078e8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80078e8:	6883      	ldr	r3, [r0, #8]
 80078ea:	b510      	push	{r4, lr}
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	6082      	str	r2, [r0, #8]
 80078f0:	b102      	cbz	r2, 80078f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80078f2:	6050      	str	r0, [r2, #4]
 80078f4:	6842      	ldr	r2, [r0, #4]
 80078f6:	605a      	str	r2, [r3, #4]
 80078f8:	680c      	ldr	r4, [r1, #0]
 80078fa:	4284      	cmp	r4, r0
 80078fc:	d103      	bne.n	8007906 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	60d8      	str	r0, [r3, #12]
 8007902:	6043      	str	r3, [r0, #4]
 8007904:	bd10      	pop	{r4, pc}
 8007906:	68d1      	ldr	r1, [r2, #12]
 8007908:	4281      	cmp	r1, r0
 800790a:	bf0c      	ite	eq
 800790c:	60d3      	streq	r3, [r2, #12]
 800790e:	6093      	strne	r3, [r2, #8]
 8007910:	e7f6      	b.n	8007900 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08007912 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007912:	68c3      	ldr	r3, [r0, #12]
 8007914:	b123      	cbz	r3, 8007920 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8007916:	4618      	mov	r0, r3
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1fb      	bne.n	8007916 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800791e:	4770      	bx	lr
 8007920:	6843      	ldr	r3, [r0, #4]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	4282      	cmp	r2, r0
 8007926:	d102      	bne.n	800792e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8007928:	4618      	mov	r0, r3
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	e7f9      	b.n	8007922 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800792e:	68c2      	ldr	r2, [r0, #12]
 8007930:	4293      	cmp	r3, r2
 8007932:	bf18      	it	ne
 8007934:	4618      	movne	r0, r3
 8007936:	4770      	bx	lr

08007938 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8007938:	7802      	ldrb	r2, [r0, #0]
 800793a:	4603      	mov	r3, r0
 800793c:	b92a      	cbnz	r2, 800794a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800793e:	6842      	ldr	r2, [r0, #4]
 8007940:	6852      	ldr	r2, [r2, #4]
 8007942:	4282      	cmp	r2, r0
 8007944:	d101      	bne.n	800794a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8007946:	68d0      	ldr	r0, [r2, #12]
 8007948:	4770      	bx	lr
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	b122      	cbz	r2, 8007958 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800794e:	4610      	mov	r0, r2
 8007950:	68d2      	ldr	r2, [r2, #12]
 8007952:	2a00      	cmp	r2, #0
 8007954:	d1fb      	bne.n	800794e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8007956:	4770      	bx	lr
 8007958:	6858      	ldr	r0, [r3, #4]
 800795a:	6882      	ldr	r2, [r0, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d102      	bne.n	8007966 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 8007960:	4603      	mov	r3, r0
 8007962:	6840      	ldr	r0, [r0, #4]
 8007964:	e7f9      	b.n	800795a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 8007966:	4770      	bx	lr

08007968 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007968:	f7ff bfd3 	b.w	8007912 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0800796c <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800796c:	f7ff bfe4 	b.w	8007938 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08007970 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	461e      	mov	r6, r3
 8007976:	f103 0804 	add.w	r8, r3, #4
 800797a:	2300      	movs	r3, #0
 800797c:	460c      	mov	r4, r1
 800797e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8007982:	604a      	str	r2, [r1, #4]
 8007984:	700b      	strb	r3, [r1, #0]
 8007986:	b300      	cbz	r0, 80079ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8007988:	4296      	cmp	r6, r2
 800798a:	6091      	str	r1, [r2, #8]
 800798c:	d118      	bne.n	80079c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800798e:	6071      	str	r1, [r6, #4]
 8007990:	60f4      	str	r4, [r6, #12]
 8007992:	2701      	movs	r7, #1
 8007994:	f04f 0900 	mov.w	r9, #0
 8007998:	6873      	ldr	r3, [r6, #4]
 800799a:	42a3      	cmp	r3, r4
 800799c:	d03f      	beq.n	8007a1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800799e:	6860      	ldr	r0, [r4, #4]
 80079a0:	7802      	ldrb	r2, [r0, #0]
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	d13b      	bne.n	8007a1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80079a6:	6845      	ldr	r5, [r0, #4]
 80079a8:	68ab      	ldr	r3, [r5, #8]
 80079aa:	4298      	cmp	r0, r3
 80079ac:	d123      	bne.n	80079f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80079ae:	68eb      	ldr	r3, [r5, #12]
 80079b0:	b183      	cbz	r3, 80079d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	b972      	cbnz	r2, 80079d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80079b6:	7007      	strb	r7, [r0, #0]
 80079b8:	701f      	strb	r7, [r3, #0]
 80079ba:	702a      	strb	r2, [r5, #0]
 80079bc:	462c      	mov	r4, r5
 80079be:	e7eb      	b.n	8007998 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80079c0:	68b3      	ldr	r3, [r6, #8]
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d1e5      	bne.n	8007992 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80079c6:	60b1      	str	r1, [r6, #8]
 80079c8:	e7e3      	b.n	8007992 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80079ca:	60d1      	str	r1, [r2, #12]
 80079cc:	68f3      	ldr	r3, [r6, #12]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d1df      	bne.n	8007992 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80079d2:	e7dd      	b.n	8007990 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80079d4:	68c3      	ldr	r3, [r0, #12]
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	d103      	bne.n	80079e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80079da:	4641      	mov	r1, r8
 80079dc:	f7ff ff6f 	bl	80078be <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80079e0:	4604      	mov	r4, r0
 80079e2:	6863      	ldr	r3, [r4, #4]
 80079e4:	4641      	mov	r1, r8
 80079e6:	701f      	strb	r7, [r3, #0]
 80079e8:	4628      	mov	r0, r5
 80079ea:	f885 9000 	strb.w	r9, [r5]
 80079ee:	f7ff ff7b 	bl	80078e8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80079f2:	4625      	mov	r5, r4
 80079f4:	e7e2      	b.n	80079bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80079f6:	b113      	cbz	r3, 80079fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	d0db      	beq.n	80079b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80079fe:	6883      	ldr	r3, [r0, #8]
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d103      	bne.n	8007a0c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8007a04:	4641      	mov	r1, r8
 8007a06:	f7ff ff6f 	bl	80078e8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	4641      	mov	r1, r8
 8007a10:	701f      	strb	r7, [r3, #0]
 8007a12:	4628      	mov	r0, r5
 8007a14:	f885 9000 	strb.w	r9, [r5]
 8007a18:	f7ff ff51 	bl	80078be <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8007a1c:	e7e9      	b.n	80079f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007a26 <_ZSt17__throw_bad_allocv>:
 8007a26:	b508      	push	{r3, lr}
 8007a28:	f000 f938 	bl	8007c9c <abort>

08007a2c <_ZSt19__throw_logic_errorPKc>:
 8007a2c:	b508      	push	{r3, lr}
 8007a2e:	f000 f935 	bl	8007c9c <abort>

08007a32 <_ZSt20__throw_length_errorPKc>:
 8007a32:	b508      	push	{r3, lr}
 8007a34:	f000 f932 	bl	8007c9c <abort>

08007a38 <_ZSt20__throw_out_of_rangePKc>:
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	f000 f92f 	bl	8007c9c <abort>
	...

08007a40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 8007a40:	4901      	ldr	r1, [pc, #4]	; (8007a48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 8007a42:	f000 b915 	b.w	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007a46:	bf00      	nop
 8007a48:	080081ec 	.word	0x080081ec

08007a4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a4e:	2400      	movs	r4, #0
 8007a50:	2310      	movs	r3, #16
 8007a52:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a56:	6803      	ldr	r3, [r0, #0]
 8007a58:	4615      	mov	r5, r2
 8007a5a:	699e      	ldr	r6, [r3, #24]
 8007a5c:	e9cd 4400 	strd	r4, r4, [sp]
 8007a60:	466b      	mov	r3, sp
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	47b0      	blx	r6
 8007a66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a6a:	f003 0306 	and.w	r3, r3, #6
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	bf09      	itett	eq
 8007a72:	2001      	moveq	r0, #1
 8007a74:	4620      	movne	r0, r4
 8007a76:	9b00      	ldreq	r3, [sp, #0]
 8007a78:	602b      	streq	r3, [r5, #0]
 8007a7a:	b004      	add	sp, #16
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}

08007a7e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007a7e:	9800      	ldr	r0, [sp, #0]
 8007a80:	4290      	cmp	r0, r2
 8007a82:	bf14      	ite	ne
 8007a84:	2001      	movne	r0, #1
 8007a86:	2006      	moveq	r0, #6
 8007a88:	4770      	bx	lr
	...

08007a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007a92:	6003      	str	r3, [r0, #0]
 8007a94:	f000 f8e9 	bl	8007c6a <_ZNSt9type_infoD1Ev>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	bd10      	pop	{r4, pc}
 8007a9c:	0800822c 	.word	0x0800822c

08007aa0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f7ff fff2 	bl	8007a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	2108      	movs	r1, #8
 8007aac:	f7ff feee 	bl	800788c <_ZdlPvj>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007abc:	461f      	mov	r7, r3
 8007abe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8007ac2:	4598      	cmp	r8, r3
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	d107      	bne.n	8007ada <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007aca:	9907      	ldr	r1, [sp, #28]
 8007acc:	f000 f8d0 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007ad0:	b118      	cbz	r0, 8007ada <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007ad2:	7165      	strb	r5, [r4, #5]
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ada:	4639      	mov	r1, r7
 8007adc:	4630      	mov	r0, r6
 8007ade:	f000 f8c7 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d0f6      	beq.n	8007ad4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f8c4 8000 	str.w	r8, [r4]
 8007aec:	7125      	strb	r5, [r4, #4]
 8007aee:	71a3      	strb	r3, [r4, #6]
 8007af0:	e7f0      	b.n	8007ad4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007af2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007af2:	b538      	push	{r3, r4, r5, lr}
 8007af4:	4615      	mov	r5, r2
 8007af6:	461c      	mov	r4, r3
 8007af8:	f000 f8ba 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007afc:	b120      	cbz	r0, 8007b08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007afe:	2308      	movs	r3, #8
 8007b00:	60e3      	str	r3, [r4, #12]
 8007b02:	2306      	movs	r3, #6
 8007b04:	6025      	str	r5, [r4, #0]
 8007b06:	7123      	strb	r3, [r4, #4]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}

08007b0a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8007b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	4616      	mov	r6, r2
 8007b14:	461f      	mov	r7, r3
 8007b16:	f000 f8ab 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007b1a:	b948      	cbnz	r0, 8007b30 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007b1c:	2f03      	cmp	r7, #3
 8007b1e:	d807      	bhi.n	8007b30 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	4632      	mov	r2, r6
 8007b24:	4629      	mov	r1, r5
 8007b26:	4620      	mov	r0, r4
 8007b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	4718      	bx	r3
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b34 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007b34:	b508      	push	{r3, lr}
 8007b36:	4780      	blx	r0
 8007b38:	f000 f8b0 	bl	8007c9c <abort>

08007b3c <_ZSt13get_terminatev>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <_ZSt13get_terminatev+0xc>)
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	f3bf 8f5b 	dmb	ish
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	2000000c 	.word	0x2000000c

08007b4c <_ZSt9terminatev>:
 8007b4c:	b508      	push	{r3, lr}
 8007b4e:	f7ff fff5 	bl	8007b3c <_ZSt13get_terminatev>
 8007b52:	f7ff ffef 	bl	8007b34 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08007b58 <_ZSt15get_new_handlerv>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <_ZSt15get_new_handlerv+0xc>)
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	f3bf 8f5b 	dmb	ish
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000012c 	.word	0x2000012c

08007b68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007b6e:	6003      	str	r3, [r0, #0]
 8007b70:	f7ff ff8c 	bl	8007a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007b74:	4620      	mov	r0, r4
 8007b76:	bd10      	pop	{r4, pc}
 8007b78:	0800828c 	.word	0x0800828c

08007b7c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
 8007b80:	f7ff fff2 	bl	8007b68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007b84:	4620      	mov	r0, r4
 8007b86:	210c      	movs	r1, #12
 8007b88:	f7ff fe80 	bl	800788c <_ZdlPvj>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	bd10      	pop	{r4, pc}

08007b90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007b98:	4606      	mov	r6, r0
 8007b9a:	4590      	cmp	r8, r2
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	4615      	mov	r5, r2
 8007ba0:	461c      	mov	r4, r3
 8007ba2:	d00b      	beq.n	8007bbc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8007ba4:	68b0      	ldr	r0, [r6, #8]
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	6803      	ldr	r3, [r0, #0]
 8007baa:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bae:	6a1e      	ldr	r6, [r3, #32]
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	46b4      	mov	ip, r6
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	4760      	bx	ip
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f000 f857 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d0ee      	beq.n	8007ba4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8007bc6:	2006      	movs	r0, #6
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007bcc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8007bd6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4681      	mov	r9, r0
 8007bde:	4617      	mov	r7, r2
 8007be0:	4698      	mov	r8, r3
 8007be2:	f000 f845 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007be6:	b190      	cbz	r0, 8007c0e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	6034      	str	r4, [r6, #0]
 8007bec:	7137      	strb	r7, [r6, #4]
 8007bee:	db09      	blt.n	8007c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007bf0:	442c      	add	r4, r5
 8007bf2:	45a2      	cmp	sl, r4
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2406      	moveq	r4, #6
 8007bf8:	2401      	movne	r4, #1
 8007bfa:	71b4      	strb	r4, [r6, #6]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	b001      	add	sp, #4
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	3502      	adds	r5, #2
 8007c06:	d1f9      	bne.n	8007bfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	71b3      	strb	r3, [r6, #6]
 8007c0c:	e7f6      	b.n	8007bfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007c0e:	4554      	cmp	r4, sl
 8007c10:	d106      	bne.n	8007c20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007c12:	4659      	mov	r1, fp
 8007c14:	4648      	mov	r0, r9
 8007c16:	f000 f82b 	bl	8007c70 <_ZNKSt9type_infoeqERKS_>
 8007c1a:	b108      	cbz	r0, 8007c20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007c1c:	7177      	strb	r7, [r6, #5]
 8007c1e:	e7ed      	b.n	8007bfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007c20:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007c24:	463a      	mov	r2, r7
 8007c26:	6803      	ldr	r3, [r0, #0]
 8007c28:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8007c2c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8007c30:	69dc      	ldr	r4, [r3, #28]
 8007c32:	4629      	mov	r1, r5
 8007c34:	4643      	mov	r3, r8
 8007c36:	46a4      	mov	ip, r4
 8007c38:	b001      	add	sp, #4
 8007c3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3e:	4760      	bx	ip

08007c40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c44:	4607      	mov	r7, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	4615      	mov	r5, r2
 8007c4a:	461e      	mov	r6, r3
 8007c4c:	f7ff ff51 	bl	8007af2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007c50:	b948      	cbnz	r0, 8007c66 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8007c52:	68b8      	ldr	r0, [r7, #8]
 8007c54:	462a      	mov	r2, r5
 8007c56:	6803      	ldr	r3, [r0, #0]
 8007c58:	4621      	mov	r1, r4
 8007c5a:	699f      	ldr	r7, [r3, #24]
 8007c5c:	4633      	mov	r3, r6
 8007c5e:	46bc      	mov	ip, r7
 8007c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c64:	4760      	bx	ip
 8007c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c6a <_ZNSt9type_infoD1Ev>:
 8007c6a:	4770      	bx	lr

08007c6c <_ZNKSt9type_info14__is_pointer_pEv>:
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4770      	bx	lr

08007c70 <_ZNKSt9type_infoeqERKS_>:
 8007c70:	4281      	cmp	r1, r0
 8007c72:	b508      	push	{r3, lr}
 8007c74:	d00e      	beq.n	8007c94 <_ZNKSt9type_infoeqERKS_+0x24>
 8007c76:	6840      	ldr	r0, [r0, #4]
 8007c78:	7803      	ldrb	r3, [r0, #0]
 8007c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7c:	d00c      	beq.n	8007c98 <_ZNKSt9type_infoeqERKS_+0x28>
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	780b      	ldrb	r3, [r1, #0]
 8007c82:	2b2a      	cmp	r3, #42	; 0x2a
 8007c84:	bf08      	it	eq
 8007c86:	3101      	addeq	r1, #1
 8007c88:	f7f8 fa60 	bl	800014c <strcmp>
 8007c8c:	fab0 f080 	clz	r0, r0
 8007c90:	0940      	lsrs	r0, r0, #5
 8007c92:	bd08      	pop	{r3, pc}
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7fc      	b.n	8007c92 <_ZNKSt9type_infoeqERKS_+0x22>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7fa      	b.n	8007c92 <_ZNKSt9type_infoeqERKS_+0x22>

08007c9c <abort>:
 8007c9c:	2006      	movs	r0, #6
 8007c9e:	b508      	push	{r3, lr}
 8007ca0:	f000 f982 	bl	8007fa8 <raise>
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7f9 fbb4 	bl	8001412 <_exit>
	...

08007cac <__errno>:
 8007cac:	4b01      	ldr	r3, [pc, #4]	; (8007cb4 <__errno+0x8>)
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000010 	.word	0x20000010

08007cb8 <__libc_init_array>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	2600      	movs	r6, #0
 8007cbc:	4d0c      	ldr	r5, [pc, #48]	; (8007cf0 <__libc_init_array+0x38>)
 8007cbe:	4c0d      	ldr	r4, [pc, #52]	; (8007cf4 <__libc_init_array+0x3c>)
 8007cc0:	1b64      	subs	r4, r4, r5
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	42a6      	cmp	r6, r4
 8007cc6:	d109      	bne.n	8007cdc <__libc_init_array+0x24>
 8007cc8:	f000 f998 	bl	8007ffc <_init>
 8007ccc:	2600      	movs	r6, #0
 8007cce:	4d0a      	ldr	r5, [pc, #40]	; (8007cf8 <__libc_init_array+0x40>)
 8007cd0:	4c0a      	ldr	r4, [pc, #40]	; (8007cfc <__libc_init_array+0x44>)
 8007cd2:	1b64      	subs	r4, r4, r5
 8007cd4:	10a4      	asrs	r4, r4, #2
 8007cd6:	42a6      	cmp	r6, r4
 8007cd8:	d105      	bne.n	8007ce6 <__libc_init_array+0x2e>
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce0:	4798      	blx	r3
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	e7ee      	b.n	8007cc4 <__libc_init_array+0xc>
 8007ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cea:	4798      	blx	r3
 8007cec:	3601      	adds	r6, #1
 8007cee:	e7f2      	b.n	8007cd6 <__libc_init_array+0x1e>
 8007cf0:	080082c8 	.word	0x080082c8
 8007cf4:	080082c8 	.word	0x080082c8
 8007cf8:	080082c8 	.word	0x080082c8
 8007cfc:	080082cc 	.word	0x080082cc

08007d00 <malloc>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <malloc+0xc>)
 8007d02:	4601      	mov	r1, r0
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f000 b8a3 	b.w	8007e50 <_malloc_r>
 8007d0a:	bf00      	nop
 8007d0c:	20000010 	.word	0x20000010

08007d10 <free>:
 8007d10:	4b02      	ldr	r3, [pc, #8]	; (8007d1c <free+0xc>)
 8007d12:	4601      	mov	r1, r0
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	f000 b833 	b.w	8007d80 <_free_r>
 8007d1a:	bf00      	nop
 8007d1c:	20000010 	.word	0x20000010

08007d20 <memcpy>:
 8007d20:	440a      	add	r2, r1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	4770      	bx	lr
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d38:	d1f9      	bne.n	8007d2e <memcpy+0xe>
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <memmove>:
 8007d3c:	4288      	cmp	r0, r1
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	eb01 0402 	add.w	r4, r1, r2
 8007d44:	d902      	bls.n	8007d4c <memmove+0x10>
 8007d46:	4284      	cmp	r4, r0
 8007d48:	4623      	mov	r3, r4
 8007d4a:	d807      	bhi.n	8007d5c <memmove+0x20>
 8007d4c:	1e43      	subs	r3, r0, #1
 8007d4e:	42a1      	cmp	r1, r4
 8007d50:	d008      	beq.n	8007d64 <memmove+0x28>
 8007d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d5a:	e7f8      	b.n	8007d4e <memmove+0x12>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4402      	add	r2, r0
 8007d60:	428a      	cmp	r2, r1
 8007d62:	d100      	bne.n	8007d66 <memmove+0x2a>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d6e:	e7f7      	b.n	8007d60 <memmove+0x24>

08007d70 <memset>:
 8007d70:	4603      	mov	r3, r0
 8007d72:	4402      	add	r2, r0
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d100      	bne.n	8007d7a <memset+0xa>
 8007d78:	4770      	bx	lr
 8007d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7e:	e7f9      	b.n	8007d74 <memset+0x4>

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d040      	beq.n	8007e0a <_free_r+0x8a>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f924 	bl	8007fe0 <__malloc_lock>
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <_free_r+0x8c>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x2c>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 b920 	b.w	8007fec <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x42>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x1e>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x4c>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x42>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1850      	adds	r0, r2, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x6c>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x22>
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	4401      	add	r1, r0
 8007de6:	6011      	str	r1, [r2, #0]
 8007de8:	6053      	str	r3, [r2, #4]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x22>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x74>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x22>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf01      	itttt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	1809      	addeq	r1, r1, r0
 8007e02:	6021      	streq	r1, [r4, #0]
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	6054      	str	r4, [r2, #4]
 8007e08:	e7cb      	b.n	8007da2 <_free_r+0x22>
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20000130 	.word	0x20000130

08007e10 <sbrk_aligned>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	4e0e      	ldr	r6, [pc, #56]	; (8007e4c <sbrk_aligned+0x3c>)
 8007e14:	460c      	mov	r4, r1
 8007e16:	6831      	ldr	r1, [r6, #0]
 8007e18:	4605      	mov	r5, r0
 8007e1a:	b911      	cbnz	r1, 8007e22 <sbrk_aligned+0x12>
 8007e1c:	f000 f88c 	bl	8007f38 <_sbrk_r>
 8007e20:	6030      	str	r0, [r6, #0]
 8007e22:	4621      	mov	r1, r4
 8007e24:	4628      	mov	r0, r5
 8007e26:	f000 f887 	bl	8007f38 <_sbrk_r>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d00a      	beq.n	8007e44 <sbrk_aligned+0x34>
 8007e2e:	1cc4      	adds	r4, r0, #3
 8007e30:	f024 0403 	bic.w	r4, r4, #3
 8007e34:	42a0      	cmp	r0, r4
 8007e36:	d007      	beq.n	8007e48 <sbrk_aligned+0x38>
 8007e38:	1a21      	subs	r1, r4, r0
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f87c 	bl	8007f38 <_sbrk_r>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d101      	bne.n	8007e48 <sbrk_aligned+0x38>
 8007e44:	f04f 34ff 	mov.w	r4, #4294967295
 8007e48:	4620      	mov	r0, r4
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	20000134 	.word	0x20000134

08007e50 <_malloc_r>:
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	1ccd      	adds	r5, r1, #3
 8007e56:	f025 0503 	bic.w	r5, r5, #3
 8007e5a:	3508      	adds	r5, #8
 8007e5c:	2d0c      	cmp	r5, #12
 8007e5e:	bf38      	it	cc
 8007e60:	250c      	movcc	r5, #12
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	4607      	mov	r7, r0
 8007e66:	db01      	blt.n	8007e6c <_malloc_r+0x1c>
 8007e68:	42a9      	cmp	r1, r5
 8007e6a:	d905      	bls.n	8007e78 <_malloc_r+0x28>
 8007e6c:	230c      	movs	r3, #12
 8007e6e:	2600      	movs	r6, #0
 8007e70:	603b      	str	r3, [r7, #0]
 8007e72:	4630      	mov	r0, r6
 8007e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e78:	4e2e      	ldr	r6, [pc, #184]	; (8007f34 <_malloc_r+0xe4>)
 8007e7a:	f000 f8b1 	bl	8007fe0 <__malloc_lock>
 8007e7e:	6833      	ldr	r3, [r6, #0]
 8007e80:	461c      	mov	r4, r3
 8007e82:	bb34      	cbnz	r4, 8007ed2 <_malloc_r+0x82>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4638      	mov	r0, r7
 8007e88:	f7ff ffc2 	bl	8007e10 <sbrk_aligned>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	4604      	mov	r4, r0
 8007e90:	d14d      	bne.n	8007f2e <_malloc_r+0xde>
 8007e92:	6834      	ldr	r4, [r6, #0]
 8007e94:	4626      	mov	r6, r4
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	d140      	bne.n	8007f1c <_malloc_r+0xcc>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	eb04 0803 	add.w	r8, r4, r3
 8007ea4:	f000 f848 	bl	8007f38 <_sbrk_r>
 8007ea8:	4580      	cmp	r8, r0
 8007eaa:	d13a      	bne.n	8007f22 <_malloc_r+0xd2>
 8007eac:	6821      	ldr	r1, [r4, #0]
 8007eae:	3503      	adds	r5, #3
 8007eb0:	1a6d      	subs	r5, r5, r1
 8007eb2:	f025 0503 	bic.w	r5, r5, #3
 8007eb6:	3508      	adds	r5, #8
 8007eb8:	2d0c      	cmp	r5, #12
 8007eba:	bf38      	it	cc
 8007ebc:	250c      	movcc	r5, #12
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7ff ffa5 	bl	8007e10 <sbrk_aligned>
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d02b      	beq.n	8007f22 <_malloc_r+0xd2>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	442b      	add	r3, r5
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	e00e      	b.n	8007ef0 <_malloc_r+0xa0>
 8007ed2:	6822      	ldr	r2, [r4, #0]
 8007ed4:	1b52      	subs	r2, r2, r5
 8007ed6:	d41e      	bmi.n	8007f16 <_malloc_r+0xc6>
 8007ed8:	2a0b      	cmp	r2, #11
 8007eda:	d916      	bls.n	8007f0a <_malloc_r+0xba>
 8007edc:	1961      	adds	r1, r4, r5
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	6025      	str	r5, [r4, #0]
 8007ee2:	bf18      	it	ne
 8007ee4:	6059      	strne	r1, [r3, #4]
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	bf08      	it	eq
 8007eea:	6031      	streq	r1, [r6, #0]
 8007eec:	5162      	str	r2, [r4, r5]
 8007eee:	604b      	str	r3, [r1, #4]
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f104 060b 	add.w	r6, r4, #11
 8007ef6:	f000 f879 	bl	8007fec <__malloc_unlock>
 8007efa:	f026 0607 	bic.w	r6, r6, #7
 8007efe:	1d23      	adds	r3, r4, #4
 8007f00:	1af2      	subs	r2, r6, r3
 8007f02:	d0b6      	beq.n	8007e72 <_malloc_r+0x22>
 8007f04:	1b9b      	subs	r3, r3, r6
 8007f06:	50a3      	str	r3, [r4, r2]
 8007f08:	e7b3      	b.n	8007e72 <_malloc_r+0x22>
 8007f0a:	6862      	ldr	r2, [r4, #4]
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	bf0c      	ite	eq
 8007f10:	6032      	streq	r2, [r6, #0]
 8007f12:	605a      	strne	r2, [r3, #4]
 8007f14:	e7ec      	b.n	8007ef0 <_malloc_r+0xa0>
 8007f16:	4623      	mov	r3, r4
 8007f18:	6864      	ldr	r4, [r4, #4]
 8007f1a:	e7b2      	b.n	8007e82 <_malloc_r+0x32>
 8007f1c:	4634      	mov	r4, r6
 8007f1e:	6876      	ldr	r6, [r6, #4]
 8007f20:	e7b9      	b.n	8007e96 <_malloc_r+0x46>
 8007f22:	230c      	movs	r3, #12
 8007f24:	4638      	mov	r0, r7
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	f000 f860 	bl	8007fec <__malloc_unlock>
 8007f2c:	e7a1      	b.n	8007e72 <_malloc_r+0x22>
 8007f2e:	6025      	str	r5, [r4, #0]
 8007f30:	e7de      	b.n	8007ef0 <_malloc_r+0xa0>
 8007f32:	bf00      	nop
 8007f34:	20000130 	.word	0x20000130

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4d05      	ldr	r5, [pc, #20]	; (8007f54 <_sbrk_r+0x1c>)
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 fa70 	bl	8001428 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000138 	.word	0x20000138

08007f58 <_raise_r>:
 8007f58:	291f      	cmp	r1, #31
 8007f5a:	b538      	push	{r3, r4, r5, lr}
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	d904      	bls.n	8007f6c <_raise_r+0x14>
 8007f62:	2316      	movs	r3, #22
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f6e:	b112      	cbz	r2, 8007f76 <_raise_r+0x1e>
 8007f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f74:	b94b      	cbnz	r3, 8007f8a <_raise_r+0x32>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f830 	bl	8007fdc <_getpid_r>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4601      	mov	r1, r0
 8007f80:	4620      	mov	r0, r4
 8007f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f86:	f000 b817 	b.w	8007fb8 <_kill_r>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d00a      	beq.n	8007fa4 <_raise_r+0x4c>
 8007f8e:	1c59      	adds	r1, r3, #1
 8007f90:	d103      	bne.n	8007f9a <_raise_r+0x42>
 8007f92:	2316      	movs	r3, #22
 8007f94:	6003      	str	r3, [r0, #0]
 8007f96:	2001      	movs	r0, #1
 8007f98:	e7e7      	b.n	8007f6a <_raise_r+0x12>
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa2:	4798      	blx	r3
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e7e0      	b.n	8007f6a <_raise_r+0x12>

08007fa8 <raise>:
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <raise+0xc>)
 8007faa:	4601      	mov	r1, r0
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f7ff bfd3 	b.w	8007f58 <_raise_r>
 8007fb2:	bf00      	nop
 8007fb4:	20000010 	.word	0x20000010

08007fb8 <_kill_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_kill_r+0x20>)
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	f7f9 fa14 	bl	80013f2 <_kill>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d102      	bne.n	8007fd4 <_kill_r+0x1c>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	b103      	cbz	r3, 8007fd4 <_kill_r+0x1c>
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000138 	.word	0x20000138

08007fdc <_getpid_r>:
 8007fdc:	f7f9 ba02 	b.w	80013e4 <_getpid>

08007fe0 <__malloc_lock>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__malloc_lock+0x8>)
 8007fe2:	f000 b809 	b.w	8007ff8 <__retarget_lock_acquire_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	2000013c 	.word	0x2000013c

08007fec <__malloc_unlock>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__malloc_unlock+0x8>)
 8007fee:	f000 b804 	b.w	8007ffa <__retarget_lock_release_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	2000013c 	.word	0x2000013c

08007ff8 <__retarget_lock_acquire_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <__retarget_lock_release_recursive>:
 8007ffa:	4770      	bx	lr

08007ffc <_init>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	bf00      	nop
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr

08008008 <_fini>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr
